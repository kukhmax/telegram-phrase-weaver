document.addEventListener('DOMContentLoaded', () => {
    // =================================================================
    // 1. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–û–õ–£–ß–ï–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í DOM
    // =================================================================

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç Telegram Web App –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º Telegram
    const tg = window.Telegram.WebApp;
    // –ì–æ–≤–æ—Ä–∏–º Telegram, —á—Ç–æ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
    tg.ready(); 

    // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å
    const decksContainer = document.getElementById('decks-container');
    const noDecksMessage = document.getElementById('no-decks-message');
    const deckCardTemplate = document.getElementById('deck-card-template');
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.
    const state = {
        token: null, // –ù–∞—à JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        user: null,  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        decks: []    // –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
    };


    // =================================================================
    // 2. –õ–û–ì–ò–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–Ø –° API
    // =================================================================

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç initData –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞.
     * –≠—Ç–æ –ø–µ—Ä–≤—ã–π –∏ —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –Ω–∞—à–µ–º—É API.
     */
    async function authenticateUser() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ initData. –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ, –µ–≥–æ –Ω–µ –±—É–¥–µ—Ç.
        if (!tg.initData) {
            console.error("Telegram.WebApp.initData is empty. Are you running in Telegram?");
            // –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            decksContainer.innerHTML = "<p style='color: red;'>–û—à–∏–±–∫–∞: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram.</p>";
            return;
        }

        try {
            const response = await fetch(`${config.API_BASE_URL}/auth/telegram`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ init_data: tg.initData })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`Authentication failed: ${errorData.detail || response.statusText}`);
            }

            const data = await response.json();
            console.log("Authentication successful:", data);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –Ω–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            state.token = data.access_token;
            state.user = data.user;

        } catch (error) {
            console.error(error);
            decksContainer.innerHTML = `<p style='color: red;'>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>`;
        }
    }
    
    /**
     * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ª–æ–¥ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç JWT —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
     */
    async function fetchDecks() {
        if (!state.token) {
            console.error("Cannot fetch decks without an auth token.");
            return;
        }
        
        try {
            const response = await fetch(`${config.API_BASE_URL}/decks/`, {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${state.token}`
                }
            });

            if (!response.ok) {
                 throw new Error(`Failed to fetch decks: ${response.statusText}`);
            }

            const decks = await response.json();
            console.log("Decks fetched:", decks);
            state.decks = decks; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        } catch (error) {
            console.error(error);
        }
    }


    // =================================================================
    // 3. –õ–û–ì–ò–ö–ê –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø (–†–ï–ù–î–ï–†–ò–ù–ì)
    // =================================================================

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–æ–ª–æ–¥—ã –Ω–∞ —ç–∫—Ä–∞–Ω–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ state.decks.
     */
    function renderDecks() {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π
        decksContainer.innerHTML = ''; 

        if (state.decks.length === 0) {
            // –ï—Å–ª–∏ –∫–æ–ª–æ–¥ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É
            noDecksMessage.classList.remove('hidden');
        } else {
            // –ï—Å–ª–∏ –∫–æ–ª–æ–¥—ã –µ—Å—Ç—å, —Å–∫—Ä—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º –∏—Ö
            noDecksMessage.classList.add('hidden');

            state.decks.forEach(deck => {
                // –ö–ª–æ–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ <template>
                const cardNode = deckCardTemplate.content.cloneNode(true);
                
                // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞ –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
                cardNode.querySelector('.deck-name').textContent = deck.name;
                cardNode.querySelector('.deck-description').textContent = deck.description || '';
                cardNode.querySelector('.lang-from').textContent = getFlagEmoji(deck.lang_from) + ` ${deck.lang_from.toUpperCase()}`;
                cardNode.querySelector('.lang-to').textContent = getFlagEmoji(deck.lang_to) + ` ${deck.lang_to.toUpperCase()}`;
                cardNode.querySelector('.cards-total').textContent = deck.cards_count;
                cardNode.querySelector('.cards-repeat').textContent = deck.due_count;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                decksContainer.appendChild(cardNode);
            });
        }
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —è–∑—ã–∫–∞.
     * @param {string} langCode - –î–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä., 'en', 'ru').
     * @returns {string} - –≠–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞.
     */
    function getFlagEmoji(langCode) {
        const flagMap = {
            en: 'üá∫üá∏', ru: 'üá∑üá∫', fr: 'üá´üá∑', de: 'üá©üá™',
            es: 'üá™üá∏', pl: 'üáµüá±', pt: 'üáµüáπ', it: 'üáÆüáπ'
        };
        return flagMap[langCode] || 'üè≥Ô∏è';
    }


    // =================================================================
    // 4. –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
    // =================================================================

    /**
     * –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É:
     * 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
     * 2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     * 3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async function main() {
        await authenticateUser();
        // –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω
        if (state.token) {
            await fetchDecks();
            renderDecks();
        }
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º!
    main();
});