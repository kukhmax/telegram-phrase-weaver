/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –≤ –∫–æ–ª–æ–¥–µ
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
 */

class CardManager {
    constructor(apiClient, authService) {
        this.apiClient = apiClient;
        this.authService = authService;
        this.currentUser = null;
        this.currentDeck = null;
        this.cards = [];
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container: null,
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–æ–¥–µ
            deckHeader: null,
            backButton: null,
            
            // –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫
            cardsList: null,
            emptyState: null,
            
            // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
            cardForm: null,
            createButton: null,
            
            // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
            frontTextInput: null,
            backTextInput: null,
            audioUrlInput: null,
            imageUrlInput: null,
            difficultySelect: null,
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            submitButton: null,
            cancelButton: null,
            
            // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞
            audioPreview: null,
            imagePreview: null
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.isFormVisible = false;
        this.isLoading = false;
        this.editingCardId = null;
        
        // –£—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        this.difficultyLevels = [
            { value: 1, name: '–û—á–µ–Ω—å –ª–µ–≥–∫–æ', color: '#4CAF50' },
            { value: 2, name: '–õ–µ–≥–∫–æ', color: '#8BC34A' },
            { value: 3, name: '–°—Ä–µ–¥–Ω–µ', color: '#FFC107' },
            { value: 4, name: '–°–ª–æ–∂–Ω–æ', color: '#FF9800' },
            { value: 5, name: '–û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ', color: '#F44336' }
        ];
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
     * @param {Object} deck - –û–±—ä–µ–∫—Ç –∫–æ–ª–æ–¥—ã
     */
    async init(deck) {
        try {
            this.currentDeck = deck;
            this.currentUser = await this.authService.getCurrentUser();
            
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }
            
            this.createDOM();
            this.bindEvents();
            await this.loadCards();
            
        } catch (error) {
            console.error('[CardManager] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: ' + error.message);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    createDOM() {
        const container = document.getElementById('app');
        if (!container) {
            throw new Error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        container.innerHTML = `
            <div class="card-manager">
                <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–æ–¥–µ -->
                <div class="deck-header">
                    <button class="back-button" id="backButton">
                        <i class="icon-arrow-left"></i>
                        –ù–∞–∑–∞–¥ –∫ –∫–æ–ª–æ–¥–∞–º
                    </button>
                    <div class="deck-info">
                        <h1>${this.escapeHtml(this.currentDeck.name)}</h1>
                        <p class="deck-description">${this.escapeHtml(this.currentDeck.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}</p>
                        <div class="deck-languages">
                            <span class="language-badge source">${this.currentDeck.source_language.toUpperCase()}</span>
                            <i class="icon-arrow-right"></i>
                            <span class="language-badge target">${this.currentDeck.target_language.toUpperCase()}</span>
                        </div>
                    </div>
                </div>
                
                <!-- –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                <div class="cards-header">
                    <h2>–ö–∞—Ä—Ç–æ—á–∫–∏</h2>
                    <button class="btn btn-primary" id="createCardButton">
                        <i class="icon-plus"></i>
                        –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
                    </button>
                </div>
                
                <!-- –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ -->
                <div class="card-form-container" id="cardFormContainer" style="display: none;">
                    <div class="card-form">
                        <h3 id="formTitle">–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞</h3>
                        
                        <div class="form-group">
                            <label for="frontText">–¢–µ–∫—Å—Ç –Ω–∞ ${this.currentDeck.source_language.toUpperCase()} *</label>
                            <textarea id="frontText" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º —è–∑—ã–∫–µ" required></textarea>
                        </div>
                        
                        <div class="form-group">
                            <label for="backText">–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ ${this.currentDeck.target_language.toUpperCase()} *</label>
                            <textarea id="backText" placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥" required></textarea>
                        </div>
                        
                        <div class="form-row">
                            <div class="form-group">
                                <label for="audioUrl">URL –∞—É–¥–∏–æ (–ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ)</label>
                                <input type="url" id="audioUrl" placeholder="https://example.com/audio.mp3">
                                <div class="audio-preview" id="audioPreview" style="display: none;">
                                    <audio controls></audio>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="imageUrl">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
                                <input type="url" id="imageUrl" placeholder="https://example.com/image.jpg">
                                <div class="image-preview" id="imagePreview" style="display: none;">
                                    <img alt="–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä">
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label for="difficulty">–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</label>
                            <select id="difficulty">
                                ${this.difficultyLevels.map(level => 
                                    `<option value="${level.value}">${level.name}</option>`
                                ).join('')}
                            </select>
                        </div>
                        
                        <div class="form-error" id="formError" style="display: none;"></div>
                        
                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" id="cancelButton">–û—Ç–º–µ–Ω–∞</button>
                            <button type="submit" class="btn btn-primary" id="submitButton">
                                <span class="button-text">–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É</span>
                                <span class="loading-spinner" style="display: none;"></span>
                            </button>
                        </div>
                    </div>
                </div>
                
                <!-- –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ -->
                <div class="cards-list" id="cardsList">
                    <div class="loading-state">
                        <div class="loading-spinner"></div>
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫...</p>
                    </div>
                </div>
                
                <!-- –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ -->
                <div class="empty-state" id="emptyState" style="display: none;">
                    <div class="empty-icon">üìö</div>
                    <h3>–ö–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è</p>
                    <button class="btn btn-primary" id="createFirstCardButton">
                        <i class="icon-plus"></i>
                        –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É
                    </button>
                </div>
            </div>
        `;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements.container = container.querySelector('.card-manager');
        this.elements.backButton = container.querySelector('#backButton');
        this.elements.cardsList = container.querySelector('#cardsList');
        this.elements.emptyState = container.querySelector('#emptyState');
        this.elements.cardForm = container.querySelector('#cardFormContainer');
        this.elements.createButton = container.querySelector('#createCardButton');
        this.elements.frontTextInput = container.querySelector('#frontText');
        this.elements.backTextInput = container.querySelector('#backText');
        this.elements.audioUrlInput = container.querySelector('#audioUrl');
        this.elements.imageUrlInput = container.querySelector('#imageUrl');
        this.elements.difficultySelect = container.querySelector('#difficulty');
        this.elements.submitButton = container.querySelector('#submitButton');
        this.elements.cancelButton = container.querySelector('#cancelButton');
        this.elements.audioPreview = container.querySelector('#audioPreview');
        this.elements.imagePreview = container.querySelector('#imagePreview');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ–ª–æ–¥–∞–º
        this.elements.backButton.addEventListener('click', () => {
            window.app.showDeckManager();
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    showCreateForm() {
        this.editingCardId = null;
        this.resetForm();
        document.querySelector('#formTitle').textContent = '–ù–æ–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞';
        document.querySelector('.button-text').textContent = '–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É';
        this.elements.cardForm.style.display = 'block';
        this.elements.frontTextInput.focus();
        this.isFormVisible = true;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    showEditForm(card) {
        this.editingCardId = card.id;
        this.resetForm();
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
        this.elements.frontTextInput.value = card.front_text;
        this.elements.backTextInput.value = card.back_text;
        this.elements.audioUrlInput.value = card.audio_url || '';
        this.elements.imageUrlInput.value = card.image_url || '';
        this.elements.difficultySelect.value = card.difficulty;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
        this.updateAudioPreview();
        this.updateImagePreview();
        
        document.querySelector('#formTitle').textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É';
        document.querySelector('.button-text').textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è';
        this.elements.cardForm.style.display = 'block';
        this.elements.frontTextInput.focus();
        this.isFormVisible = true;
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    hideCreateForm() {
        this.elements.cardForm.style.display = 'none';
        this.resetForm();
        this.isFormVisible = false;
        this.editingCardId = null;
    }
    
    /**
     * –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    resetForm() {
        this.elements.frontTextInput.value = '';
        this.elements.backTextInput.value = '';
        this.elements.audioUrlInput.value = '';
        this.elements.imageUrlInput.value = '';
        this.elements.difficultySelect.value = '1';
        this.hideFormError();
        this.hideMediaPreviews();
        this.validateForm();
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
     */
    validateForm() {
        const frontText = this.elements.frontTextInput.value.trim();
        const backText = this.elements.backTextInput.value.trim();
        
        const isValid = frontText.length > 0 && backText.length > 0;
        this.elements.submitButton.disabled = !isValid;
        
        return isValid;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Ñ–æ—Ä–º—ã
     */
    showFormError(message) {
        const errorElement = document.querySelector('#formError');
        if (errorElement) {
            errorElement.textContent = message;
            errorElement.style.display = 'block';
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É —Ñ–æ—Ä–º—ã
     */
    hideFormError() {
        const errorElement = document.querySelector('#formError');
        if (errorElement) {
            errorElement.style.display = 'none';
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∞—É–¥–∏–æ
     */
    updateAudioPreview() {
        const url = this.elements.audioUrlInput.value.trim();
        const preview = this.elements.audioPreview;
        const audio = preview.querySelector('audio');
        
        if (url && this.isValidUrl(url)) {
            audio.src = url;
            preview.style.display = 'block';
        } else {
            preview.style.display = 'none';
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    updateImagePreview() {
        const url = this.elements.imageUrlInput.value.trim();
        const preview = this.elements.imagePreview;
        const img = preview.querySelector('img');
        
        if (url && this.isValidUrl(url)) {
            img.src = url;
            img.onload = () => preview.style.display = 'block';
            img.onerror = () => preview.style.display = 'none';
        } else {
            preview.style.display = 'none';
        }
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –≤—Å–µ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –º–µ–¥–∏–∞
     */
    hideMediaPreviews() {
        this.elements.audioPreview.style.display = 'none';
        this.elements.imagePreview.style.display = 'none';
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
     */
    isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    async handleSubmitCard() {
        if (!this.validateForm()) {
            this.showFormError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
            return;
        }
        
        this.setLoading(true);
        this.hideFormError();
        
        try {
            const cardData = {
                front_text: this.elements.frontTextInput.value.trim(),
                back_text: this.elements.backTextInput.value.trim(),
                audio_url: this.elements.audioUrlInput.value.trim() || null,
                image_url: this.elements.imageUrlInput.value.trim() || null,
                difficulty: parseInt(this.elements.difficultySelect.value),
                deck_id: this.currentDeck.id
            };
            
            let response;
            if (this.editingCardId) {
                // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                response = await this.apiClient.client.put(
                    `/api/cards/${this.editingCardId}?user_id=${this.currentUser.id}`,
                    cardData
                );
            } else {
                // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
                response = await this.apiClient.client.post(
                    `/api/cards?user_id=${this.currentUser.id}`,
                    cardData
                );
            }
            
            if (response.ok) {
                const action = this.editingCardId ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∞' : '—Å–æ–∑–¥–∞–Ω–∞';
                this.showSuccess(`–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ ${action}!`);
                this.hideCreateForm();
                await this.loadCards();
            } else {
                const errorData = await response.json();
                throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏');
            }
            
        } catch (error) {
            console.error('[CardManager] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
            this.showFormError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: ' + error.message);
        } finally {
            this.setLoading(false);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–ª–æ–¥—ã
     */
    async loadCards() {
        try {
            this.setLoading(true);
            
            const response = await this.apiClient.client.get(
                `/api/cards/deck/${this.currentDeck.id}?user_id=${this.currentUser.id}`
            );
            
            if (response.ok) {
                const data = await response.json();
                this.cards = data.cards || [];
                this.renderCards();
                this.updateCardsCount();
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫');
            }
            
        } catch (error) {
            console.error('[CardManager] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: ' + error.message);
        } finally {
            this.setLoading(false);
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    updateCardsCount() {
        const totalCardsElement = document.getElementById('totalCards');
        if (totalCardsElement) {
            totalCardsElement.textContent = this.cards.length;
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    renderCards() {
        if (this.cards.length === 0) {
            this.elements.cardsList.style.display = 'none';
            this.elements.emptyState.style.display = 'block';
        } else {
            this.elements.emptyState.style.display = 'none';
            this.elements.cardsList.style.display = 'block';
            this.elements.cardsList.innerHTML = this.cards.map(card => this.renderCardItem(card)).join('');
            this.bindCardEvents();
        }
    }
    
    /**
     * –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    renderCardItem(card) {
        return `
            <div class="card-item" data-card-id="${card.id}">
                <div class="card-content">
                    <div class="card-phrase">
                        <span class="phrase-text">${this.escapeHtml(card.front_text)}</span>
                        <span class="phrase-separator"> - </span>
                        <span class="translation-text">${this.escapeHtml(card.back_text)}</span>
                    </div>
                    
                    ${card.audio_url ? `
                        <div class="card-audio">
                            <audio controls>
                                <source src="${card.audio_url}" type="audio/mpeg">
                                –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                            </audio>
                        </div>
                    ` : ''}
                    
                    ${card.image_url ? `
                        <div class="card-image">
                            <img src="${card.image_url}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏" loading="lazy">
                        </div>
                    ` : ''}
                </div>
                
                <div class="card-actions">
                    <button class="btn btn-danger delete-card" data-card-id="${card.id}" title="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        `;
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    bindCardEvents() {
        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        document.querySelectorAll('.delete-card').forEach(button => {
            button.addEventListener('click', (e) => {
                const cardId = parseInt(e.target.closest('.delete-card').dataset.cardId);
                if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?')) {
                    this.deleteCard(cardId);
                }
            });
        });
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    async deleteCard(cardId) {
        const card = this.cards.find(c => c.id === cardId);
        if (!card) return;
        
        const confirmed = confirm(
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É "${card.front_text}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`
        );
        
        if (!confirmed) return;
        
        try {
            const response = await this.apiClient.client.delete(
                `/api/cards/${cardId}?user_id=${this.currentUser.id}`
            );
            
            if (response.ok) {
                this.showSuccess('–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
                await this.loadCards();
            } else {
                const errorData = await response.json();
                throw new Error(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏');
            }
            
        } catch (error) {
            console.error('[CardManager] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: ' + error.message);
        }
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(loading) {
        this.isLoading = loading;
        
        if (this.elements.submitButton) {
            this.elements.submitButton.disabled = loading || !this.validateForm();
            const spinner = this.elements.submitButton.querySelector('.loading-spinner');
            const text = this.elements.submitButton.querySelector('.button-text');
            
            if (loading) {
                spinner.style.display = 'inline-block';
                text.style.display = 'none';
            } else {
                spinner.style.display = 'none';
                text.style.display = 'inline';
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccess(message) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (window.app && window.app.showNotification) {
            window.app.showNotification(message, 'success');
        } else {
            alert(message);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showError(message) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (window.app && window.app.showNotification) {
            window.app.showNotification(message, 'error');
        } else {
            alert('–û—à–∏–±–∫–∞: ' + message);
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    showInfo(message) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (window.app && window.app.showNotification) {
            window.app.showNotification(message, 'info');
        } else {
            alert(message);
        }
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
window.CardManager = CardManager;

console.log('[CardManager] Card manager component loaded');