/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–¥–∞–º–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥
 */

class DeckManager {
    constructor(apiClient, authService) {
        this.apiClient = apiClient;
        this.authService = authService;
        this.currentUser = null;
        this.decks = [];
        
        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {
            // –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            container: null,
            
            // –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
            decksList: null,
            emptyState: null,
            
            // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã
            createForm: null,
            createButton: null,
            
            // –ü–æ–ª—è —Ñ–æ—Ä–º—ã
            nameInput: null,
            descriptionInput: null,
            sourceLanguageSelect: null,
            targetLanguageSelect: null,
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            submitButton: null,
            cancelButton: null
        };
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.isFormVisible = false;
        this.isLoading = false;
        
        // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
        this.languages = [
            { code: 'en', name: 'English' },
            { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
            { code: 'es', name: 'Espa√±ol' },
            { code: 'fr', name: 'Fran√ßais' },
            { code: 'de', name: 'Deutsch' },
            { code: 'it', name: 'Italiano' },
            { code: 'pt', name: 'Portugu√™s' },
            { code: 'zh', name: '‰∏≠Êñá' },
            { code: 'ja', name: 'Êó•Êú¨Ë™û' },
            { code: 'ko', name: 'ÌïúÍµ≠Ïñ¥' }
        ];
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    async init() {
        console.log('[DeckManager] Initializing deck manager...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.currentUser = await this.authService.getCurrentUser();
            
            if (!this.currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω');
            }
            
            // –°–æ–∑–¥–∞–µ–º DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            this.createDOM();
            
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.bindEvents();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–ª–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.loadDecks();
            
            console.log('[DeckManager] Deck manager initialized successfully');
            
        } catch (error) {
            console.error('[DeckManager] Failed to initialize:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–ª–æ–¥: ' + error.message);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
     */
    createDOM() {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        this.elements.container = document.getElementById('deck-manager');
        
        if (!this.elements.container) {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            this.elements.container = document.createElement('div');
            this.elements.container.id = 'deck-manager';
            this.elements.container.className = 'deck-manager';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            const app = document.getElementById('app');
            if (app) {
                app.appendChild(this.elements.container);
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        this.elements.container.innerHTML = `
            <div class="deck-manager-header">
                <h2>üìö –ú–æ–∏ –∫–æ–ª–æ–¥—ã</h2>
                <button id="create-deck-btn" class="btn btn-primary">
                    <span class="btn-icon">‚ûï</span>
                    –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É
                </button>
            </div>
            
            <!-- –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã (—Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
            <div id="create-deck-form" class="create-deck-form" style="display: none;">
                <div class="form-header">
                    <h3>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã</h3>
                </div>
                
                <form id="deck-form">
                    <div class="form-group">
                        <label for="deck-name">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã *</label>
                        <input 
                            type="text" 
                            id="deck-name" 
                            name="name" 
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"
                            required
                            maxlength="255"
                        >
                    </div>
                    
                    <div class="form-group">
                        <label for="deck-description">–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                        <textarea 
                            id="deck-description" 
                            name="description" 
                            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–æ–¥—ã"
                            maxlength="1000"
                            rows="3"
                        ></textarea>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label for="source-language">–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ *</label>
                            <select id="source-language" name="sourceLanguage" required>
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</option>
                                ${this.languages.map(lang => 
                                    `<option value="${lang.code}">${lang.name}</option>`
                                ).join('')}
                            </select>
                        </div>
                        
                        <div class="form-group">
                            <label for="target-language">–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ *</label>
                            <select id="target-language" name="targetLanguage" required>
                                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</option>
                                ${this.languages.map(lang => 
                                    `<option value="${lang.code}">${lang.name}</option>`
                                ).join('')}
                            </select>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" id="cancel-btn" class="btn btn-secondary">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="submit" id="submit-btn" class="btn btn-primary">
                            <span class="btn-icon">üíæ</span>
                            –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É
                        </button>
                    </div>
                </form>
            </div>
            
            <!-- –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥ -->
            <div id="decks-list" class="decks-list">
                <!-- –ö–æ–ª–æ–¥—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
            
            <!-- –°–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –∫–æ–ª–æ–¥" -->
            <div id="empty-state" class="empty-state" style="display: none;">
                <div class="empty-icon">üìö</div>
                <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ª–æ–¥</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞</p>
                <button class="btn btn-primary" onclick="document.getElementById('create-deck-btn').click()">
                    <span class="btn-icon">‚ûï</span>
                    –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–¥—É
                </button>
            </div>
            
            <!-- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ -->
            <div id="loading-indicator" class="loading-indicator" style="display: none;">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–ª–æ–¥...</p>
            </div>
        `;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements.createButton = document.getElementById('create-deck-btn');
        this.elements.createForm = document.getElementById('create-deck-form');
        this.elements.decksList = document.getElementById('decks-list');
        this.elements.emptyState = document.getElementById('empty-state');
        
        // –≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
        this.elements.nameInput = document.getElementById('deck-name');
        this.elements.descriptionInput = document.getElementById('deck-description');
        this.elements.sourceLanguageSelect = document.getElementById('source-language');
        this.elements.targetLanguageSelect = document.getElementById('target-language');
        
        // –ö–Ω–æ–ø–∫–∏
        this.elements.submitButton = document.getElementById('submit-btn');
        this.elements.cancelButton = document.getElementById('cancel-btn');
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã
        this.elements.createButton.addEventListener('click', () => {
            this.showCreateForm();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        this.elements.cancelButton.addEventListener('click', () => {
            this.hideCreateForm();
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('deck-form');
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleCreateDeck();
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        this.elements.nameInput.addEventListener('input', () => {
            this.validateForm();
        });
        
        this.elements.sourceLanguageSelect.addEventListener('change', () => {
            this.validateForm();
        });
        
        this.elements.targetLanguageSelect.addEventListener('change', () => {
            this.validateForm();
        });
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã
     */
    showCreateForm() {
        this.elements.createForm.style.display = 'block';
        this.elements.nameInput.focus();
        this.isFormVisible = true;
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
        this.elements.createForm.scrollIntoView({ behavior: 'smooth' });
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã
     */
    hideCreateForm() {
        this.elements.createForm.style.display = 'none';
        this.isFormVisible = false;
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('deck-form').reset();
        this.validateForm();
    }
    
    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
     */
    validateForm() {
        const name = this.elements.nameInput.value.trim();
        const sourceLanguage = this.elements.sourceLanguageSelect.value;
        const targetLanguage = this.elements.targetLanguageSelect.value;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const isValid = name.length > 0 && sourceLanguage && targetLanguage && sourceLanguage !== targetLanguage;
        
        // –í–∫–ª—é—á–∞–µ–º/–æ—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        this.elements.submitButton.disabled = !isValid;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —è–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if (sourceLanguage && targetLanguage && sourceLanguage === targetLanguage) {
            this.showFormError('–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏');
        } else {
            this.hideFormError();
        }
        
        return isValid;
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–µ
     */
    showFormError(message) {
        let errorElement = document.querySelector('.form-error');
        if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.className = 'form-error';
            this.elements.createForm.appendChild(errorElement);
        }
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
    
    /**
     * –°–∫—Ä—ã—Ç—å –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–µ
     */
    hideFormError() {
        const errorElement = document.querySelector('.form-error');
        if (errorElement) {
            errorElement.style.display = 'none';
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã
     */
    async handleCreateDeck() {
        if (!this.validateForm()) {
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        this.setLoading(true);
        
        try {
            // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = {
                name: this.elements.nameInput.value.trim(),
                description: this.elements.descriptionInput.value.trim() || null,
                source_language: this.elements.sourceLanguageSelect.value,
                target_language: this.elements.targetLanguageSelect.value
            };
            
            console.log('[DeckManager] Creating deck:', formData);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
            const response = await this.apiClient.client.post(
                `/decks?user_id=${this.currentUser.id}`,
                formData
            );
            
            console.log('[DeckManager] Deck created successfully:', response);
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            this.hideCreateForm();
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
            await this.loadDecks();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            this.showSuccess('–ö–æ–ª–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!');
            
        } catch (error) {
            console.error('[DeckManager] Failed to create deck:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–ª–æ–¥—ã: ' + error.message);
        } finally {
            this.setLoading(false);
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async loadDecks() {
        console.log('[DeckManager] Loading user decks...');
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            document.getElementById('loading-indicator').style.display = 'block';
            this.elements.decksList.style.display = 'none';
            this.elements.emptyState.style.display = 'none';
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await this.apiClient.client.get(
                `/decks?user_id=${this.currentUser.id}`
            );
            
            this.decks = response.decks || [];
            
            console.log('[DeckManager] Loaded decks:', this.decks);
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–ª–æ–¥—ã
            this.renderDecks();
            
        } catch (error) {
            console.error('[DeckManager] Failed to load decks:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–æ–¥: ' + error.message);
        } finally {
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            document.getElementById('loading-indicator').style.display = 'none';
        }
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–¥
     */
    renderDecks() {
        if (this.decks.length === 0) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–Ω–µ—Ç –∫–æ–ª–æ–¥"
            this.elements.decksList.style.display = 'none';
            this.elements.emptyState.style.display = 'block';
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
        this.elements.emptyState.style.display = 'none';
        this.elements.decksList.style.display = 'block';
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–¥—ã
        const decksHTML = this.decks.map(deck => this.renderDeckCard(deck)).join('');
        
        this.elements.decksList.innerHTML = decksHTML;
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–ª–æ–¥
        this.bindDeckCardEvents();
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–æ–¥—ã
     */
    renderDeckCard(deck) {
        const sourceLanguageName = this.getLanguageName(deck.source_language);
        const targetLanguageName = this.getLanguageName(deck.target_language);
        const createdDate = new Date(deck.created_at).toLocaleDateString('ru-RU');
        
        return `
            <div class="deck-card" data-deck-id="${deck.id}">
                <div class="deck-card-header">
                    <h3 class="deck-name">${this.escapeHtml(deck.name)}</h3>
                    <div class="deck-actions">
                        <button class="btn-icon edit-deck" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            ‚úèÔ∏è
                        </button>
                        <button class="btn-icon delete-deck" title="–£–¥–∞–ª–∏—Ç—å">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                
                ${deck.description ? `
                    <p class="deck-description">${this.escapeHtml(deck.description)}</p>
                ` : ''}
                
                <div class="deck-info">
                    <div class="deck-languages">
                        <span class="language-badge source">${sourceLanguageName}</span>
                        <span class="arrow">‚Üí</span>
                        <span class="language-badge target">${targetLanguageName}</span>
                    </div>
                    
                    <div class="deck-stats">
                        <div class="stat">
                            <span class="stat-value">${deck.card_count}</span>
                            <span class="stat-label">–∫–∞—Ä—Ç–æ—á–µ–∫</span>
                        </div>
                        <div class="stat">
                            <span class="stat-value">${deck.cards_to_review}</span>
                            <span class="stat-label">–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é</span>
                        </div>
                    </div>
                </div>
                
                <div class="deck-footer">
                    <span class="deck-date">–°–æ–∑–¥–∞–Ω–∞: ${createdDate}</span>
                    <div class="deck-actions">
                        <button class="btn btn-primary open-deck">
                            <span class="btn-icon">üìñ</span>
                            –û—Ç–∫—Ä—ã—Ç—å
                        </button>
                        <button class="btn btn-success add-cards" data-deck-id="${deck.id}">
                            <span class="btn-icon">‚ûï</span>
                            –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏
                        </button>
                    </div>
                </div>
            </div>
        `;
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–ª–æ–¥
     */
    bindDeckCardEvents() {
        // –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–ª–æ–¥—ã
        document.querySelectorAll('.open-deck').forEach(button => {
            button.addEventListener('click', (e) => {
                const deckCard = e.target.closest('.deck-card');
                const deckId = parseInt(deckCard.dataset.deckId);
                this.openDeck(deckId);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        document.querySelectorAll('.add-cards').forEach(button => {
            button.addEventListener('click', (e) => {
                const deckId = parseInt(e.target.dataset.deckId);
                this.addCardsToDeck(deckId);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        document.querySelectorAll('.edit-deck').forEach(button => {
            button.addEventListener('click', (e) => {
                const deckCard = e.target.closest('.deck-card');
                const deckId = parseInt(deckCard.dataset.deckId);
                this.editDeck(deckId);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        document.querySelectorAll('.delete-deck').forEach(button => {
            button.addEventListener('click', (e) => {
                const deckCard = e.target.closest('.deck-card');
                const deckId = parseInt(deckCard.dataset.deckId);
                this.deleteDeck(deckId);
            });
        });
    }
    
    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–ª–æ–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
     */
    async openDeck(deckId) {
        console.log('[DeckManager] Opening deck:', deckId);
        
        try {
            // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
            const deck = this.decks.find(d => d.id === parseInt(deckId));
            if (!deck) {
                this.showError('–ö–æ–ª–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
            if (window.app && typeof window.app.showCardsView === 'function') {
                await window.app.showCardsView(deck);
            } else {
                console.error('[DeckManager] App instance or showCardsView method not found');
                this.showError('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –∫–∞—Ä—Ç–æ—á–∫–∞–º');
            }
        } catch (error) {
            console.error('[DeckManager] Error opening deck:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ–ª–æ–¥—ã: ' + error.message);
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–¥—É
     */
    async addCardsToDeck(deckId) {
        console.log('[DeckManager] Adding cards to deck:', deckId);
        
        try {
            // –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
            const deck = this.decks.find(d => d.id === parseInt(deckId));
            if (!deck) {
                this.showError('–ö–æ–ª–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                return;
            }
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            if (window.cardEnricher && typeof window.cardEnricher.open === 'function') {
                window.cardEnricher.open(deck.id);
            } else {
                console.error('[DeckManager] CardEnricher instance not found');
                this.showError('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫');
            }
        } catch (error) {
            console.error('[DeckManager] Error adding cards to deck:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: ' + error.message);
        }
    }
    
    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
     */
    editDeck(deckId) {
        console.log('[DeckManager] Editing deck:', deckId);
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
        this.showInfo(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã ${deckId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö`);
    }
    
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–¥—ã
     */
    async deleteDeck(deckId) {
        const deck = this.decks.find(d => d.id === deckId);
        if (!deck) return;
        
        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        const confirmed = confirm(
            `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–¥—É "${deck.name}"?\n\n` +
            `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –∫–æ–ª–æ–¥–µ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.`
        );
        
        if (!confirmed) return;
        
        try {
            console.log('[DeckManager] Deleting deck:', deckId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            await this.apiClient.client.delete(
                `/decks/${deckId}?user_id=${this.currentUser.id}`
            );
            
            console.log('[DeckManager] Deck deleted successfully');
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
            await this.loadDecks();
            
            this.showSuccess('–ö–æ–ª–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
            
        } catch (error) {
            console.error('[DeckManager] Failed to delete deck:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–ª–æ–¥—ã: ' + error.message);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ –∫–æ–¥—É
     */
    getLanguageName(code) {
        const language = this.languages.find(lang => lang.code === code);
        return language ? language.name : code.toUpperCase();
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
    
    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
     */
    setLoading(loading) {
        this.isLoading = loading;
        
        if (this.elements.submitButton) {
            this.elements.submitButton.disabled = loading;
            this.elements.submitButton.textContent = loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É';
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
     */
    showSuccess(message) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.log('[DeckManager] Success:', message);
        alert('‚úÖ ' + message);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
     */
    showError(message) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.error('[DeckManager] Error:', message);
        alert('‚ùå ' + message);
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    showInfo(message) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        console.info('[DeckManager] Info:', message);
        alert('‚ÑπÔ∏è ' + message);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
window.DeckManager = DeckManager;

console.log('[DeckManager] Deck manager component loaded');