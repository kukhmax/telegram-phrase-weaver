# backend/app/services/tts_service.py

import asyncio
import hashlib
import logging
from pathlib import Path
from typing import Optional, Dict

from gtts import gTTS
from ..core.config import get_settings

settings = get_settings()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - TTS - %(levelname)s - %(message)s')

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤
BASE_DIR = Path(__file__).parent.parent.parent  # backend/
AUDIO_DIR = BASE_DIR / "frontend" / "assets" / "audio"
AUDIO_DIR.mkdir(parents=True, exist_ok=True)

# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏ gTTS
GTTS_LANGUAGES = {
    'de': 'de',  # German
    'en': 'en',  # English
    'es': 'es',  # Spanish
    'fr': 'fr',  # French
    'pl': 'pl',  # Polish
    'pt': 'pt',  # Portuguese
    'ru': 'ru',  # Russian
}

class TTSService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º gTTS"""
    
    def __init__(self):
        logging.info("TTS Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å gTTS")
    
    def _generate_filename(self, text: str, language_id: str, prefix: str = "tts") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –∏ —è–∑—ã–∫–∞"""
        text_hash = hashlib.md5(f"{text}_{language_id}".encode()).hexdigest()[:12]
        return f"{prefix}_{language_id}_{text_hash}.wav"
    

    
    async def _generate_with_gtts(self, text: str, language_id: str) -> Optional[str]:
        """Fallback –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –ø–æ–º–æ—â—å—é gTTS"""
        try:
            filename = self._generate_filename(text, language_id, "gtts")
            file_path = AUDIO_DIR / filename
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º GTTS_LANGUAGES –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
            gtts_lang = GTTS_LANGUAGES.get(language_id, 'en')
            
            # TLD –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
            # –ò—Å–∫–ª—é—á–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ TLD, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
            tld_map = {
                'pt': 'pt',  # –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π —Å –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–º TLD
                # 'pl': 'pl',  # –ü–æ–ª—å—Å–∫–∏–π TLD –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º com
                'de': 'de',  # –ù–µ–º–µ—Ü–∫–∏–π —Å –Ω–µ–º–µ—Ü–∫–∏–º TLD
                'fr': 'fr',  # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π —Å —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º TLD
                'es': 'es',  # –ò—Å–ø–∞–Ω—Å–∫–∏–π —Å –∏—Å–ø–∞–Ω—Å–∫–∏–º TLD
                # 'ru': 'ru'   # –†—É—Å—Å–∫–∏–π TLD –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º com
            }
            tld = tld_map.get(gtts_lang, 'com')
            
            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
            logging.info(f"üîä TTS –ì–ï–ù–ï–†–ê–¶–ò–Ø:")
            logging.info(f"   üìù –¢–µ–∫—Å—Ç: '{text[:50]}{'...' if len(text) > 50 else ''}'")
            logging.info(f"   üåç –í—Ö–æ–¥–Ω–æ–π language_id: '{language_id}'")
            logging.info(f"   üéØ –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ gTTS —è–∑—ã–∫: '{gtts_lang}'")
            logging.info(f"   üåê TLD –¥–ª—è –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è: '{tld}'")
            logging.info(f"   üìÅ –§–∞–π–ª: {filename}")
            
            def tts_sync():
                tts = gTTS(text=text, lang=gtts_lang, tld=tld, slow=False)
                tts.save(str(file_path))
            
            await asyncio.get_running_loop().run_in_executor(None, tts_sync)
            
            logging.info(f"gTTS fallback: '{text[:50]}...' ({language_id}) -> {filename}")
            return f"assets/audio/{filename}"
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ gTTS: {e}")
            return None
    
    async def generate_audio(self, text: str, language_id: str, 
                           prefix: str = "tts") -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º gTTS
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
            language_id: –ö–æ–¥ —è–∑—ã–∫–∞ (ISO 639-1)
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            
        Returns:
            –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ—Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        if not text or not text.strip():
            return None
        
        text = text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        filename = self._generate_filename(text, language_id, "gtts")
        file_path = AUDIO_DIR / filename
        
        if file_path.exists():
            logging.info(f"–ê—É–¥–∏–æ –∏–∑ –∫—ç—à–∞: {filename}")
            return f"assets/audio/{filename}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é gTTS
        return await self._generate_with_gtts(text, language_id)
    
    async def generate_batch_audio(self, texts_and_langs: list[tuple[str, str]], 
                                 prefix: str = "tts") -> Dict[str, Optional[str]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        
        Args:
            texts_and_langs: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (text, language_id)
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å {text: audio_path}
        """
        tasks = [
            self.generate_audio(text, lang, prefix=prefix) 
            for text, lang in texts_and_langs
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        return {
            text: result if not isinstance(result, Exception) else None
            for (text, _), result in zip(texts_and_langs, results)
        }
    
    def get_supported_languages(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ gTTS"""
        return GTTS_LANGUAGES
    
    def cleanup_old_files(self, max_age_days: int = 7):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã"""
        import time
        current_time = time.time()
        max_age_seconds = max_age_days * 24 * 60 * 60
        
        deleted_count = 0
        for file_path in AUDIO_DIR.glob("*.wav"):
            if current_time - file_path.stat().st_mtime > max_age_seconds:
                file_path.unlink()
                deleted_count += 1
        
        if deleted_count > 0:
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
tts_service = TTSService()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def generate_audio_gtts(text: str, language_id: str) -> Optional[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é gTTS"""
    return await tts_service.generate_audio(text, language_id)