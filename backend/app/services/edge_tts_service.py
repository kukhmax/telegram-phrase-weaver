#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Edge TTS —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏—è
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Microsoft Edge TTS API –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤
"""

import asyncio
import hashlib
import logging
from pathlib import Path
from typing import Optional, Dict
import tempfile
import os

try:
    import edge_tts
    EDGE_TTS_AVAILABLE = True
except ImportError:
    EDGE_TTS_AVAILABLE = False
    logging.warning("Edge TTS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip install edge-tts")

logging.basicConfig(level=logging.INFO, format='%(asctime)s - EDGE_TTS - %(levelname)s - %(message)s')

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
BASE_DIR = Path(__file__).parent.parent.parent  # backend/
AUDIO_DIR = BASE_DIR / "frontend" / "assets" / "audio"
AUDIO_DIR.mkdir(parents=True, exist_ok=True)

# –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –Ω–∞ Edge TTS –≥–æ–ª–æ—Å–∞ (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
EDGE_VOICE_MAPPING = {
    # –ü–æ–ª—å—Å–∫–∏–π - –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≥–æ–ª–æ—Å–æ–≤
    'pl': {
        'voice': 'pl-PL-ZofiaNeural',
        'backup_voices': ['pl-PL-MarekNeural'],
        'language': 'pl-PL',
        'quality': 'Neural'
    },
    
    # –†—É—Å—Å–∫–∏–π
    'ru': {
        'voice': 'ru-RU-SvetlanaNeural',
        'backup_voices': ['ru-RU-DmitryNeural'],
        'language': 'ru-RU',
        'quality': 'Neural'
    },
    
    # –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π (–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π)
    'pt': {
        'voice': 'pt-PT-RaquelNeural',
        'backup_voices': ['pt-PT-DuarteNeural'],
        'language': 'pt-PT',
        'quality': 'Neural'
    },
    
    # –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π (–ë—Ä–∞–∑–∏–ª—å—Å–∫–∏–π)
    'pt-BR': {
        'voice': 'pt-BR-FranciscaNeural',
        'backup_voices': ['pt-BR-AntonioNeural'],
        'language': 'pt-BR',
        'quality': 'Neural'
    },
    
    # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (–°–®–ê)
    'en': {
        'voice': 'en-US-JennyNeural',
        'backup_voices': ['en-US-GuyNeural', 'en-US-AriaNeural'],
        'language': 'en-US',
        'quality': 'Neural'
    },
    
    # –ù–µ–º–µ—Ü–∫–∏–π
    'de': {
        'voice': 'de-DE-KatjaNeural',
        'backup_voices': ['de-DE-ConradNeural'],
        'language': 'de-DE',
        'quality': 'Neural'
    },
    
    # –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π
    'fr': {
        'voice': 'fr-FR-DeniseNeural',
        'backup_voices': ['fr-FR-HenriNeural'],
        'language': 'fr-FR',
        'quality': 'Neural'
    },
    
    # –ò—Å–ø–∞–Ω—Å–∫–∏–π
    'es': {
        'voice': 'es-ES-ElviraNeural',
        'backup_voices': ['es-ES-AlvaroNeural'],
        'language': 'es-ES',
        'quality': 'Neural'
    }
}

class EdgeTTSService:
    """
    Edge TTS —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏
    –û—Å–æ–±–µ–Ω–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    """
    
    def __init__(self):
        self.is_available = EDGE_TTS_AVAILABLE
        if not self.is_available:
            logging.warning("Edge TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def _generate_filename(self, text: str, language_id: str, voice: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        text_hash = hashlib.md5(text.encode()).hexdigest()[:12]
        voice_short = voice.split('-')[-1].replace('Neural', '')  # –ù–∞–ø—Ä–∏–º–µ—Ä: ZofiaNeural -> Zofia
        return f"edge_{language_id}_{voice_short}_{text_hash}.mp3"
    
    def _get_voice_config(self, language_id: str) -> Dict[str, any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞ –¥–ª—è —è–∑—ã–∫–∞"""
        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
        if language_id in EDGE_VOICE_MAPPING:
            return EDGE_VOICE_MAPPING[language_id]
        
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ –±–∞–∑–æ–≤–æ–º—É —è–∑—ã–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, pt-BR -> pt)
        base_lang = language_id.split('-')[0]
        if base_lang in EDGE_VOICE_MAPPING:
            return EDGE_VOICE_MAPPING[base_lang]
        
        # Fallback –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        logging.warning(f"–ì–æ–ª–æ—Å –¥–ª—è —è–∑—ã–∫–∞ '{language_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
        return EDGE_VOICE_MAPPING['en']
    
    async def generate_audio(self, text: str, language_id: str, prefix: str = "edge") -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Edge TTS
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
            language_id: –ö–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'pl', 'pt', 'ru')
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        
        Returns:
            –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        
        if not self.is_available:
            logging.warning("Edge TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥–æ–ª–æ—Å–∞
            voice_config = self._get_voice_config(language_id)
            voice_name = voice_config['voice']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = self._generate_filename(text, language_id, voice_name)
            file_path = AUDIO_DIR / filename
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            if file_path.exists():
                logging.info(f"üéµ Edge –∞—É–¥–∏–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ: {filename}")
                return f"assets/audio/{filename}"
            
            # –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
            logging.info(f"üîä EDGE TTS –ì–ï–ù–ï–†–ê–¶–ò–Ø:")
            logging.info(f"   üìù –¢–µ–∫—Å—Ç: '{text[:50]}{'...' if len(text) > 50 else ''}'")
            logging.info(f"   üåç –í—Ö–æ–¥–Ω–æ–π language_id: '{language_id}'")
            logging.info(f"   üéØ Edge —è–∑—ã–∫: '{voice_config['language']}'")
            logging.info(f"   üé§ Edge –≥–æ–ª–æ—Å: '{voice_name}'")
            logging.info(f"   üèÜ –ö–∞—á–µ—Å—Ç–≤–æ: '{voice_config['quality']}'")
            logging.info(f"   üìÅ –§–∞–π–ª: {filename}")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä Edge TTS
            communicate = edge_tts.Communicate(text, voice_name)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            audio_data = b""
            async for chunk in communicate.stream():
                if chunk["type"] == "audio":
                    audio_data += chunk["data"]
            
            if not audio_data:
                logging.error(f"‚ùå Edge TTS –Ω–µ –≤–µ—Ä–Ω—É–ª –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è '{text[:30]}...'")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(file_path, 'wb') as f:
                f.write(audio_data)
            
            file_size = file_path.stat().st_size
            logging.info(f"‚úÖ Edge –∞—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: '{text[:30]}...' ({language_id}) -> {filename} ({file_size} –±–∞–π—Ç)")
            return f"assets/audio/{filename}"
            
        except Exception as e:
            logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ Edge TTS: {e}")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º backup –≥–æ–ª–æ—Å
            voice_config = self._get_voice_config(language_id)
            if 'backup_voices' in voice_config and voice_config['backup_voices']:
                for backup_voice in voice_config['backup_voices']:
                    try:
                        logging.info(f"üîÑ –ü—Ä–æ–±—É–µ–º backup –≥–æ–ª–æ—Å: {backup_voice}")
                        
                        communicate = edge_tts.Communicate(text, backup_voice)
                        audio_data = b""
                        async for chunk in communicate.stream():
                            if chunk["type"] == "audio":
                                audio_data += chunk["data"]
                        
                        if audio_data:
                            filename = self._generate_filename(text, language_id, backup_voice)
                            file_path = AUDIO_DIR / filename
                            
                            with open(file_path, 'wb') as f:
                                f.write(audio_data)
                            
                            logging.info(f"‚úÖ Edge backup –∞—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {backup_voice}")
                            return f"assets/audio/{filename}"
                            
                    except Exception as backup_e:
                        logging.warning(f"‚ö†Ô∏è Backup –≥–æ–ª–æ—Å {backup_voice} —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {backup_e}")
                        continue
            
            return None
    
    def get_supported_languages(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"""
        return {
            lang_code: config['voice']
            for lang_code, config in EDGE_VOICE_MAPPING.items()
        }
    
    def is_language_supported(self, language_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —è–∑—ã–∫–∞"""
        return language_id in EDGE_VOICE_MAPPING or language_id.split('-')[0] in EDGE_VOICE_MAPPING
    
    def get_service_info(self) -> Dict[str, any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
        return {
            'service': 'Microsoft Edge TTS',
            'available': self.is_available,
            'supported_languages': len(EDGE_VOICE_MAPPING),
            'voice_quality': 'Neural (Premium Quality)',
            'polish_support': 'Excellent',
            'cost': 'Free'
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
edge_tts_service = EdgeTTSService()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def generate_audio_edge(text: str, language_id: str, prefix: str = "edge") -> Optional[str]:
    """–§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ Edge TTS"""
    return await edge_tts_service.generate_audio(text, language_id, prefix)