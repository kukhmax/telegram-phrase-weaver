import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from ..core.config import get_settings

logger = logging.getLogger(__name__)
settings = get_settings()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

def get_start_instruction():
    """Get start instruction text"""
    return """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PhraseWeaver!</b>

üìö <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–ª–æ–¥—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ—Ä–∞–∑–∞–º–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –Ω–∏–∂–µ
2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–¥—É, –Ω–∞–∂–∞–≤ –Ω–∞ <b>"+"</b> –∏ –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ –∏–∑—É—á–µ–Ω–∏—è –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
3Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Ñ—Ä–∞–∑—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è
4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —ç—Ç–æ–π —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å
5Ô∏è‚É£ –î–∞–ª–µ–µ –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞—Ä–∑—É —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º, –ª–∏–±–æ —Å–æ–∑–¥–∞—é—Ç—å —Ñ—Ä–∞–∑—ã —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ö —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
6Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!

üí° <b>–¢–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</b>
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑
‚Ä¢ –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤

<i>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá</i>
    """.strip()

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """Handle /start command"""
    try:
        # Get instruction text
        instruction_text = get_start_instruction()
        
        # Create Web App button
        web_app_url = settings.API_BASE_URL or "https://pw-new.club"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    web_app=WebAppInfo(url=web_app_url)
                )
            ]
        ])
        
        # Send welcome message with instruction
        await message.answer(
            text=instruction_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        logger.info(f"Start command handled for chat {message.chat.id}")
        
    except Exception as e:
        logger.error(f"Error handling start command: {e}")
        # Send fallback message
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PhraseWeaver! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        )

@dp.message()
async def handle_other_messages(message: types.Message):
    """Handle other messages"""
    if message.text and message.text.startswith("/"):
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å PhraseWeaver."
        )

async def set_webhook():
    """Set webhook for the bot"""
    webhook_url = f"{settings.API_BASE_URL}/api/telegram/webhook"
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"Webhook set to {webhook_url}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")

async def process_webhook_update(update_data: dict):
    """Process webhook update"""
    try:
        update = types.Update(**update_data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.error(f"Error processing webhook update: {e}")
        raise