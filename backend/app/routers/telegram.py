from fastapi import APIRouter, Request, HTTPException
from pydantic import BaseModel
import logging
import json
import aiohttp
from typing import Dict, Any
from ..core.config import get_settings

router = APIRouter(prefix="/telegram", tags=["telegram"])

logger = logging.getLogger(__name__)
settings = get_settings()

class WebhookUpdate(BaseModel):
    """Telegram webhook update model"""
    update_id: int
    message: Dict[str, Any] = None
    callback_query: Dict[str, Any] = None
    inline_query: Dict[str, Any] = None

async def send_telegram_message(chat_id: int, text: str, parse_mode: str = "HTML", reply_markup: Dict = None):
    """Send message to Telegram chat"""
    if not settings.TELEGRAM_BOT_TOKEN:
        logger.error("Telegram bot token not configured")
        return False
    
    url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
    
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": parse_mode
    }
    
    if reply_markup:
        payload["reply_markup"] = reply_markup
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status == 200:
                    logger.info(f"Message sent successfully to chat {chat_id}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"Failed to send message: {response.status} - {error_text}")
                    return False
    except Exception as e:
        logger.error(f"Error sending message to Telegram: {e}")
        return False

def get_start_instruction():
    """Get start instruction text"""
    return """
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PhraseWeaver!</b>

üìö <b>–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:</b>
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–ª–æ–¥—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ—Ä–∞–∑–∞–º–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è

üöÄ <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å:</b>
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" –Ω–∏–∂–µ
2Ô∏è‚É£ –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–¥—É
3Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ—Ä–∞–∑–∞–º–∏
4Ô∏è‚É£ –ù–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!

üí° <b>–¢–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</b>
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑
‚Ä¢ –û–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤

üéØ <b>–°–∏—Å—Ç–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:</b>
–ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!

<i>–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá</i>
    """.strip()

@router.post("/webhook")
async def telegram_webhook(request: Request):
    """
    Telegram webhook endpoint.
    Receives updates from Telegram Bot API.
    """
    try:
        # Get raw request body
        body = await request.body()
        
        # Log the webhook request
        logger.info(f"Received Telegram webhook: {body.decode('utf-8')[:200]}...")
        
        # Parse JSON
        update_data = json.loads(body)
        
        # Process the update
        logger.info(f"Telegram update received: {update_data.get('update_id')}")
        
        # Handle messages
        if "message" in update_data:
            message = update_data["message"]
            chat_id = message.get("chat", {}).get("id")
            text = message.get("text", "")
            
            logger.info(f"Message from chat {chat_id}: {text}")
            
            # Handle /start command
            if text == "/start":
                await handle_start_command(chat_id)
            
            # Handle other commands here if needed
            elif text.startswith("/"):
                await send_telegram_message(
                    chat_id, 
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
                )
        
        # Handle callback queries (button presses)
        elif "callback_query" in update_data:
            callback_query = update_data["callback_query"]
            # Handle button presses here if needed
            logger.info(f"Callback query received: {callback_query}")
        
        return {"ok": True}
        
    except json.JSONDecodeError as e:
        logger.error(f"Invalid JSON in webhook: {e}")
        raise HTTPException(status_code=400, detail="Invalid JSON")
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")

async def handle_start_command(chat_id: int):
    """Handle /start command"""
    try:
        # Get instruction text
        instruction_text = get_start_instruction()
        
        # Create Web App button
        web_app_url = settings.API_BASE_URL or "https://pw-new.club"
        
        reply_markup = {
            "inline_keyboard": [[
                {
                    "text": "üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                    "web_app": {"url": web_app_url}
                }
            ]]
        }
        
        # Send welcome message with instruction
        await send_telegram_message(
            chat_id=chat_id,
            text=instruction_text,
            parse_mode="HTML",
            reply_markup=reply_markup
        )
        
        logger.info(f"Start command handled for chat {chat_id}")
        
    except Exception as e:
        logger.error(f"Error handling start command: {e}")
        # Send fallback message
        await send_telegram_message(
            chat_id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PhraseWeaver! –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."
        )

@router.get("/webhook")
async def webhook_info():
    """
    GET endpoint for webhook info (for debugging)
    """
    return {
        "message": "Telegram webhook endpoint",
        "method": "POST",
        "description": "This endpoint receives updates from Telegram Bot API"
    }