# backend/app/main.py

import os
import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from contextlib import asynccontextmanager

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from app.core.config import get_settings
    settings = get_settings()
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    class MockSettings:
        REDIS_URL = "redis://redis:6379/0"
        DATABASE_URL = "postgresql+asyncpg://phraseweaver:secure_password_123@db:5432/phraseweaver"
    settings = MockSettings()

# –ò–º–ø–æ—Ä—Ç—ã —Ä–æ—É—Ç–µ—Ä–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
routers_to_include = []
try:
    from app.routers import auth
    routers_to_include.append(('auth', auth.router))
except Exception as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å auth router: {e}")

try:
    from app.routers import cards
    routers_to_include.append(('cards', cards.router))
except Exception as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cards router: {e}")

try:
    from app.routers import decks
    routers_to_include.append(('decks', decks.router))
except Exception as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å decks router: {e}")

try:
    from app.routers import training_stats
    routers_to_include.append(('training_stats', training_stats.router))
except Exception as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å training_stats router: {e}")

try:
    from app.routers import telegram
    routers_to_include.append(('telegram', telegram.router))
except Exception as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å telegram router: {e}")

try:
    from app.routers import tts
    routers_to_include.append(('tts', tts.router))
except Exception as e:
    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å tts router: {e}")

logging.basicConfig(level=logging.INFO)
logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–æ—É—Ç–µ—Ä–æ–≤: {len(routers_to_include)}")

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ PhraseWeaver API")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram webhook
    try:
        from app.services.telegram_bot import set_webhook
        await set_webhook()
        logging.info("‚úÖ Telegram webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram webhook: {e}")
    
    yield
    # Shutdown
    logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PhraseWeaver API")

app = FastAPI(
    title="PhraseWeaver API",
    description="API –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤ —á–µ—Ä–µ–∑ Telegram Mini App",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
allowed_origins = [
    "https://pw-new.club",
    "https://www.pw-new.club",
    "https://web.telegram.org",
    "https://telegram.org",
    "https://telegram.me",
    "https://t.me",
    "http://localhost",
    "http://localhost:3000",
    "http://localhost:8000",
    "http://localhost:8080",
    "http://127.0.0.1:8000",
    "*"  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
]

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=allowed_origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=[
        "Authorization",
        "Content-Type",
        "X-Requested-With",
        "Accept",
        "Origin",
        "User-Agent"
    ],
    expose_headers=["X-Request-ID"]
)



# –ë–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã
@app.get("/")
def root():
    return {
        "message": "PhraseWeaver API —Ä–∞–±–æ—Ç–∞–µ—Ç", 
        "version": "1.0.0",
        "routers": len(routers_to_include),
        "status": "ok"
    }

@app.get("/health")
def health_check():
    return {
        "status": "ok", 
        "version": "1.0.0",
        "routers_loaded": [name for name, _ in routers_to_include]
    }

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
for router_name, router in routers_to_include:
    try:
        app.include_router(router)
        logging.info(f"‚úÖ –†–æ—É—Ç–µ—Ä {router_name} –ø–æ–¥–∫–ª—é—á–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
try:
    app.mount("/static", StaticFiles(directory="frontend"), name="static")
    logging.info("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
except Exception as e:
    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã: {e}")

# –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ frontend –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.get("/app")
async def frontend():
    try:
        return FileResponse("frontend/index.html")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ frontend: {e}")
        return {"error": "Frontend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "message": str(e)}

# Fallback –¥–ª—è SPA —Ä–æ—É—Ç–∏–Ω–≥–∞
@app.get("/{path:path}")
async def serve_spa(path: str):
    """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ SPA - –≤—Å–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ index.html"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        import os
        file_path = f"frontend/{path}"
        if os.path.exists(file_path) and os.path.isfile(file_path):
            return FileResponse(file_path)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º index.html –¥–ª—è SPA
        if os.path.exists("frontend/index.html"):
            return FileResponse("frontend/index.html")
        
        return {"error": "File not found", "path": path}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è SPA: {e}")
        return {"error": "SPA routing error", "message": str(e)}