/**
 * –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è DeckManager –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
class SimpleDeckManager {
    constructor() {
        this.languages = [
            { code: 'en', name: 'English' },
            { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
            { code: 'es', name: 'Espa√±ol' },
            { code: 'fr', name: 'Fran√ßais' },
            { code: 'de', name: 'Deutsch' },
            { code: 'it', name: 'Italiano' },
            { code: 'pt', name: 'Portugu√™s' },
            { code: 'pl', name: 'Polski' },

        ];
        
        this.elements = {};
        this.isFormVisible = false;
        this.decks = this.loadDecksFromStorage();
        this.init();
    }
    
    init() {
        this.createDOM();
        this.bindEvents();
        console.log('[SimpleDeckManager] Initialized');
    }
    
    createDOM() {
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        this.elements.container = document.getElementById('deck-manager');
        
        if (!this.elements.container) {
            console.error('[SimpleDeckManager] Container not found');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        this.elements.container.innerHTML = `
            <div class="deck-manager-header">
                <h2>üìö –ú–æ–∏ –∫–æ–ª–æ–¥—ã</h2>
                <button id="create-deck-btn" class="btn btn-primary">
                    <span class="btn-icon">‚ûï</span>
                    –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É
                </button>
            </div>
            
            <!-- –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã (—Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) -->
            <div id="create-deck-form" class="create-deck-form" style="display: none;">
                <div class="form-header">
                    <h3>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã</h3>
                </div>
                
                <form id="deck-form">
                    <div class="form-group">
                        <label for="deck-name">–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã *</label>
                        <input 
                            type="text" 
                            id="deck-name" 
                            name="name" 
                            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π"
                            required
                            maxlength="255"
                        >
                    </div>
                    
                    <div class="form-group">
                        <label for="deck-description">–û–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
                        <textarea 
                            id="deck-description" 
                            name="description" 
                            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–æ–ª–æ–¥—ã"
                            maxlength="1000"
                            rows="3"
                        ></textarea>
                    </div>
                    
                    <div class="form-row">
                        <div class="form-group">
                            <label>–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ *</label>
                            <div class="checkbox-group" id="source-language-group">
                                ${this.languages.map(lang => 
                                    `<label class="checkbox-item">
                                        <input type="checkbox" name="source_language" value="${lang.code}">
                                        <span class="checkmark"></span>
                                        ${lang.name}
                                    </label>`
                                ).join('')}
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label>–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ *</label>
                            <div class="checkbox-group" id="target-language-group">
                                ${this.languages.map(lang => 
                                    `<label class="checkbox-item">
                                        <input type="checkbox" name="target_language" value="${lang.code}">
                                        <span class="checkmark"></span>
                                        ${lang.name}
                                    </label>`
                                ).join('')}
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-actions">
                        <button type="button" id="cancel-deck-btn" class="btn btn-secondary">
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="submit" id="submit-deck-btn" class="btn btn-primary" disabled>
                            –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É
                        </button>
                    </div>
                </form>
            </div>
            
            <!-- –°–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥ -->
            <div id="decks-list" class="decks-list">
                <!-- –°–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
            </div>
        `;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements.createButton = document.getElementById('create-deck-btn');
        this.elements.createForm = document.getElementById('create-deck-form');
        this.elements.cancelButton = document.getElementById('cancel-deck-btn');
        this.elements.nameInput = document.getElementById('deck-name');
        this.elements.descriptionInput = document.getElementById('deck-description');
        this.elements.sourceLanguageGroup = document.getElementById('source-language-group');
        this.elements.targetLanguageGroup = document.getElementById('target-language-group');
        this.elements.submitButton = document.getElementById('submit-deck-btn');
        this.elements.decksList = document.getElementById('decks-list');
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–¥—ã
        this.renderDecks();
    }
    
    bindEvents() {
        if (!this.elements.createButton) return;
        
        // –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã
        this.elements.createButton.addEventListener('click', () => {
            this.showCreateForm();
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        this.elements.cancelButton.addEventListener('click', () => {
            this.hideCreateForm();
        });
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        const form = document.getElementById('deck-form');
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleCreateDeck();
        });
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        this.elements.nameInput.addEventListener('input', () => {
            this.validateForm();
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è checkbox'–æ–≤ —è–∑—ã–∫–æ–≤
        this.elements.sourceLanguageGroup.addEventListener('change', (e) => {
            if (e.target.type === 'checkbox') {
                this.handleLanguageCheckbox(e.target, 'source_language');
                this.validateForm();
            }
        });
        
        this.elements.targetLanguageGroup.addEventListener('change', (e) => {
            if (e.target.type === 'checkbox') {
                this.handleLanguageCheckbox(e.target, 'target_language');
                this.validateForm();
            }
        });
    }
    
    showCreateForm() {
        this.elements.createForm.style.display = 'block';
        this.elements.nameInput.focus();
        this.isFormVisible = true;
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
        this.elements.createForm.scrollIntoView({ behavior: 'smooth' });
    }
    
    hideCreateForm() {
        this.elements.createForm.style.display = 'none';
        this.isFormVisible = false;
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('deck-form').reset();
        this.validateForm();
    }
    
    handleLanguageCheckbox(checkbox, groupName) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö checkbox'–æ–≤ –≤ —Ç–æ–π –∂–µ –≥—Ä—É–ø–ø–µ
        const groupElement = groupName === 'source_language' ? 
            this.elements.sourceLanguageGroup : this.elements.targetLanguageGroup;
        
        const checkboxes = groupElement.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => {
            if (cb !== checkbox) {
                cb.checked = false;
            }
        });
    }
    
    validateForm() {
        const name = this.elements.nameInput.value.trim();
        const sourceLanguage = this.getSelectedLanguage('source_language');
        const targetLanguage = this.getSelectedLanguage('target_language');
        
        const isValid = name && sourceLanguage && targetLanguage && sourceLanguage !== targetLanguage;
        
        this.elements.submitButton.disabled = !isValid;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —è–∑—ã–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if (sourceLanguage && targetLanguage && sourceLanguage === targetLanguage) {
            this.showFormError('–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏');
        } else {
            this.hideFormError();
        }
        
        return isValid;
    }
    
    getSelectedLanguage(groupName) {
        const groupElement = groupName === 'source_language' ? 
            this.elements.sourceLanguageGroup : this.elements.targetLanguageGroup;
        
        const checkedCheckbox = groupElement.querySelector('input[type="checkbox"]:checked');
        return checkedCheckbox ? checkedCheckbox.value : null;
    }
    
    showFormError(message) {
        let errorElement = document.querySelector('.form-error');
        if (!errorElement) {
            errorElement = document.createElement('div');
            errorElement.className = 'form-error';
            this.elements.createForm.appendChild(errorElement);
        }
        errorElement.textContent = message;
        errorElement.style.display = 'block';
    }
    
    hideFormError() {
        const errorElement = document.querySelector('.form-error');
        if (errorElement) {
            errorElement.style.display = 'none';
        }
    }
    
    handleCreateDeck() {
        if (!this.validateForm()) {
            return;
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const formData = {
            id: Date.now(), // –ü—Ä–æ—Å—Ç–æ–π ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
            name: this.elements.nameInput.value.trim(),
            description: this.elements.descriptionInput.value.trim() || null,
            source_language: this.getSelectedLanguage('source_language'),
            target_language: this.getSelectedLanguage('target_language'),
            created_at: new Date().toISOString(),
            card_count: 0
        };
        
        console.log('[SimpleDeckManager] Creating deck:', formData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–¥—É –≤ —Å–ø–∏—Å–æ–∫
        this.decks.push(formData);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.saveDecksToStorage();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
        this.renderDecks();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        this.showSuccessMessage(`–ö–æ–ª–æ–¥–∞ "${formData.name}" —Å–æ–∑–¥–∞–Ω–∞!`);
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        this.hideCreateForm();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω —Å –Ω–æ–≤—ã–º–∏ –∫–æ–ª–æ–¥–∞–º–∏
        this.updateMainScreenDecks();
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        setTimeout(() => {
            if (typeof goHome === 'function') {
                goHome();
            }
        }, 1500); // –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    }
    
    getLanguageName(code) {
        const language = this.languages.find(lang => lang.code === code);
        return language ? language.name : code;
    }
    
    getLanguageFlag(code) {
        const flags = {
            'en': 'üá∫üá∏',
            'ru': 'üá∑üá∫',
            'fr': 'üá´üá∑',
            'de': 'üá©üá™',
            'es': 'üá™üá∏',
            'it': 'üáÆüáπ',
            'pt': 'üáµüáπ',
            'pl': 'üáµüá±',
        };
        return flags[code] || 'üåê';
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
    loadDecksFromStorage() {
        try {
            const stored = localStorage.getItem('phraseweaver_decks');
            return stored ? JSON.parse(stored) : [];
        } catch (error) {
            console.error('[SimpleDeckManager] Error loading decks from storage:', error);
            return [];
        }
    }
    
    saveDecksToStorage() {
        try {
            localStorage.setItem('phraseweaver_decks', JSON.stringify(this.decks));
        } catch (error) {
            console.error('[SimpleDeckManager] Error saving decks to storage:', error);
        }
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–¥
    renderDecks() {
        if (!this.elements.decksList) return;
        
        if (this.decks.length === 0) {
            this.elements.decksList.innerHTML = `
                <div class="empty-state">
                    <div class="empty-icon">üìö</div>
                    <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–ª–æ–¥</h3>
                    <p>–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–¥—É –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —è–∑—ã–∫–æ–≤</p>
                </div>
            `;
            return;
        }
        
        const decksHTML = this.decks.map(deck => this.renderDeckCard(deck)).join('');
        this.elements.decksList.innerHTML = decksHTML;
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–æ–¥—ã
    renderDeckCard(deck) {
        const sourceLanguage = this.getLanguageName(deck.source_language);
        const targetLanguage = this.getLanguageName(deck.target_language);
        const sourceFlag = this.getLanguageFlag(deck.source_language);
        const targetFlag = this.getLanguageFlag(deck.target_language);
        const createdDate = new Date(deck.created_at).toLocaleDateString('ru-RU');
        
        return `
            <div class="deck-card" data-deck-id="${deck.id}">
                <div class="deck-header">
                    <h3 class="deck-title">${deck.name}</h3>
                    <div class="deck-actions">
                        <button class="btn-icon" onclick="simpleDeckManager.editDeck(${deck.id})" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                            ‚úèÔ∏è
                        </button>
                        <button class="btn-icon" onclick="simpleDeckManager.deleteDeck(${deck.id})" title="–£–¥–∞–ª–∏—Ç—å">
                            üóëÔ∏è
                        </button>
                    </div>
                </div>
                
                ${deck.description ? `<p class="deck-description">${deck.description}</p>` : ''}
                
                <div class="deck-info">
                    <div class="deck-languages">
                        <span class="language-badge source">${sourceFlag} ${sourceLanguage}</span>
                        <span class="arrow">‚Üí</span>
                        <span class="language-badge target">${targetFlag} ${targetLanguage}</span>
                    </div>
                    
                    <div class="deck-stats">
                        <span class="card-count">${deck.card_count} –∫–∞—Ä—Ç–æ—á–µ–∫</span>
                        <span class="created-date">–°–æ–∑–¥–∞–Ω–∞: ${createdDate}</span>
                    </div>
                </div>
                
                <div class="deck-actions-bottom">
                    <button class="btn btn-secondary" onclick="simpleDeckManager.viewDeck(${deck.id})">
                        üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </button>
                    <button class="btn btn-primary" onclick="simpleDeckManager.startTraining(${deck.id})">
                        üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
                    </button>
                </div>
            </div>
        `;
    }
    
    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    showSuccessMessage(message) {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        const notification = document.createElement('div');
        notification.className = 'success-notification';
        notification.innerHTML = `
            <div class="notification-content">
                <span class="notification-icon">‚úÖ</span>
                <span class="notification-text">${message}</span>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!document.querySelector('#success-notification-styles')) {
            const styles = document.createElement('style');
            styles.id = 'success-notification-styles';
            styles.textContent = `
                .success-notification {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: #4CAF50;
                    color: white;
                    padding: 12px 20px;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                    z-index: 10000;
                    animation: slideIn 0.3s ease-out;
                }
                
                .notification-content {
                    display: flex;
                    align-items: center;
                    gap: 8px;
                }
                
                @keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
            `;
            document.head.appendChild(styles);
        }
        
        document.body.appendChild(notification);
        
        // –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
    
    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–ª–æ–¥–∞–º–∏
    editDeck(deckId) {
        console.log('[SimpleDeckManager] Edit deck:', deckId);
        alert('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
    }
    
    deleteDeck(deckId) {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–æ–ª–æ–¥—É?')) {
            this.decks = this.decks.filter(deck => deck.id !== deckId);
            this.saveDecksToStorage();
            this.renderDecks();
            this.showSuccessMessage('–ö–æ–ª–æ–¥–∞ —É–¥–∞–ª–µ–Ω–∞');
        }
    }
    
    viewDeck(deckId) {
        console.log('[SimpleDeckManager] View deck:', deckId);
        alert('–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
    }
    
    startTraining(deckId) {
        console.log('[SimpleDeckManager] Start training:', deckId);
        alert('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö');
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
    updateMainScreenDecks() {
        const mainDecksContainer = document.getElementById('decks-container');
        if (!mainDecksContainer) return;
        
        // –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã (—Å –∫–ª–∞—Å—Å–æ–º 'dynamic-deck')
        const dynamicDecks = mainDecksContainer.querySelectorAll('.deck-item.dynamic-deck');
        dynamicDecks.forEach(deck => deck.remove());
        
        // –£–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∑–∞–≥–ª—É—à–∫–∏
        const emptyMessage = document.getElementById('empty-decks-message');
        if (emptyMessage) {
            if (this.decks.length > 0) {
                emptyMessage.style.display = 'none';
            } else {
                emptyMessage.style.display = 'block';
            }
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É API –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–¥ –ø–µ—Ä–µ–¥ –Ω–µ–π
        const apiButton = mainDecksContainer.querySelector('.api-button');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–¥—ã
        this.decks.forEach(deck => {
            const sourceLanguage = this.getLanguageName(deck.source_language);
            const targetLanguage = this.getLanguageName(deck.target_language);
            const sourceFlag = this.getLanguageFlag(deck.source_language);
            const targetFlag = this.getLanguageFlag(deck.target_language);
            
            const deckElement = document.createElement('div');
            deckElement.className = 'deck-item dynamic-deck';
            deckElement.onclick = () => generateCards(deck.id);
            
            deckElement.innerHTML = `
                <div class="deck-content">
                    <h3 class="deck-title">${deck.name}<br><small>(${sourceFlag} ${sourceLanguage} ‚Üí ${targetFlag} ${targetLanguage})</small></h3>
                    <div class="deck-stats">
                        <span>Total: ${deck.card_count}</span>
                        <span>To repeat: 0</span>
                    </div>
                </div>
                <div class="deck-actions">
                    <button class="deck-btn cards" onclick="event.stopPropagation(); viewDeckCards(${deck.id})">–∫–∞—Ä—Ç–æ—á–∫–∏</button>
                    <button class="deck-btn training" onclick="event.stopPropagation(); startTraining(${deck.id})">—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞</button>
                </div>
            `;
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π API
            if (apiButton) {
                mainDecksContainer.insertBefore(deckElement, apiButton);
            } else {
                mainDecksContainer.appendChild(deckElement);
            }
        });
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É
window.simpleDeckManager = null;

console.log('[SimpleDeckManager] Module loaded');