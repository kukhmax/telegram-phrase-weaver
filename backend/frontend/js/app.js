// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
import { api, setAuthToken, getUserData } from '/static/js/api.js';
import { DOMElements, showWindow, renderDecks, showLoading, showError } from '/static/js/ui.js';
import { t, setLanguage, getCurrentLanguage, updateInterface, initializeI18n } from '/static/js/i18n.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let currentGeneratedData = null;
let selectedPhrases = new Set();
let currentDeckId = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ —è–∑—ã–∫–∞
function getLanguageFlag(langCode) {
    const flags = {
        'en': 'üá∫üá∏',
        'pl': 'üáµüá±',
        'es': 'üá™üá∏',
        'fr': 'üá´üá∑',
        'de': 'üá©üá™',
        'it': 'üáÆüáπ',
        'pt': 'üáµüáπ',
        'ru': 'üá∑üá∫',
    };
    return flags[langCode] || langCode;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractLanguageCode(langText) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "üáµüáπ Portuguese" –∏–ª–∏ "pl" -> "pl"
    if (langText.length === 2) {
        return langText.toLowerCase();
    }
    
    // –î–ª—è —Å—Ç—Ä–æ–∫ —Å —Ñ–ª–∞–≥–∞–º–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —è–∑—ã–∫–æ–≤
    const match = langText.match(/([a-z]{2})/i);
    return match ? match[1].toLowerCase() : 'en';
}



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
function displayGeneratedPhrases(data, langFrom, langTo) {
    currentGeneratedData = data;
    selectedPhrases.clear();
    
    const container = document.getElementById('phrases-container');
    container.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑
    const allPhrases = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É
    if (data.original_phrase) {
        allPhrases.push({
            original: data.original_phrase.original,
            translation: data.original_phrase.translation,
            isOriginal: true
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    if (data.additional_examples) {
        data.additional_examples.forEach(example => {
            allPhrases.push({
                original: example.original,
                translation: example.translation,
                isOriginal: false
            });
        });
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã
    allPhrases.forEach((phrase, index) => {
        const phraseCard = createPhraseCard(phrase, index, langFrom, langTo);
        container.appendChild(phraseCard);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    updatePhrasesCounter(allPhrases.length, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    updatePhraseImage(data.image_path);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑—ã
function createPhraseCard(phrase, index, langFrom, langTo) {
    const card = document.createElement('div');
    card.className = 'phrase-card';
    card.dataset.index = index;
    
    const langFromFlag = getLanguageFlag(extractLanguageCode(langFrom));
    const langToFlag = getLanguageFlag(extractLanguageCode(langTo));
    
    card.innerHTML = `
        <div class="phrase-content">
            <div class="phrase-line">
                <span class="flag-emoji">${langFromFlag}</span>
                <span class="phrase-text">${phrase.original}</span>
                <button class="audio-btn" onclick="playAudio('${phrase.original.replace(/'/g, "\\'")}', '${extractLanguageCode(langFrom)}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
            <div class="phrase-line">
                <span class="flag-emoji">${langToFlag}</span>
                <span class="phrase-text">${phrase.translation}</span>
                <button class="audio-btn" onclick="playAudio('${phrase.translation.replace(/'/g, "\\'")}', '${extractLanguageCode(langTo)}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
        </div>
        <div class="phrase-actions">
            <button class="phrase-btn select-btn" onclick="togglePhraseSelection(${index})">
                ${t('select') || '–í—ã–±—Ä–∞—Ç—å'}
            </button>
            <button class="phrase-btn delete-phrase-btn" onclick="deletePhraseCard(${index})">
                ${t('delete')}
            </button>
        </div>
    `;
    
    return card;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∑—ã
window.togglePhraseSelection = function(index) {
    const card = document.querySelector(`[data-index="${index}"]`);
    const button = card.querySelector('.select-btn');
    
    if (selectedPhrases.has(index)) {
        selectedPhrases.delete(index);
        card.classList.remove('selected');
        button.textContent = '–í—ã–±—Ä–∞—Ç—å';
        button.classList.remove('selected');
    } else {
        selectedPhrases.add(index);
        card.classList.add('selected');
        button.textContent = '–í—ã–±—Ä–∞–Ω–æ';
        button.classList.add('selected');
    }
    
    updatePhrasesCounter();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑—ã
window.deletePhraseCard = function(index) {
    const card = document.querySelector(`[data-index="${index}"]`);
    if (card) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
        selectedPhrases.delete(index);
        card.remove();
        updatePhrasesCounter();
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function updatePhrasesCounter(totalCount = null, selectedCount = null) {
    if (totalCount === null) {
        totalCount = document.querySelectorAll('.phrase-card').length;
    }
    if (selectedCount === null) {
        selectedCount = selectedPhrases.size;
    }
    
    document.getElementById('total-phrases-count').textContent = totalCount;
    document.getElementById('selected-phrases-count').textContent = selectedCount;
    document.getElementById('save-count').textContent = selectedCount;
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveBtn = document.getElementById('save-selected-btn');
    saveBtn.disabled = selectedCount === 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–ª–æ–¥—ã
async function displayDeckCards(deckId) {
    try {
        showLoading(t('loading_cards'));
        
        const response = await api.getDeckCards(deckId);
        
        if (response && response.deck && response.cards) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ
            document.getElementById('cards-deck-name').textContent = response.deck.name;
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —è–∑—ã–∫–∏ —Å —Ñ–ª–∞–≥–∞–º–∏ –≤ –æ–∫–Ω–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                const langFromCode = extractLanguageCode(response.deck.lang_from);
                const langToCode = extractLanguageCode(response.deck.lang_to);
                const langFromFlag = getLanguageFlag(langFromCode);
                const langToFlag = getLanguageFlag(langToCode);
                
                document.getElementById('cards-lang-from-display').textContent = `${langFromFlag}${langFromCode}`;
                document.getElementById('cards-lang-to-display').textContent = `${langToFlag}${langToCode}`;
            
            const container = document.getElementById('cards-container');
            const noCardsMessage = document.getElementById('no-cards-message');
            
            container.innerHTML = '';
            
            if (response.cards.length === 0) {
                noCardsMessage.style.display = 'block';
                container.style.display = 'none';
            } else {
                noCardsMessage.style.display = 'none';
                container.style.display = 'flex';
                
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
                response.cards.forEach(card => {
                    const cardElement = createSavedCard(card, response.deck);
                    container.appendChild(cardElement);
                });
            }
        }
    } catch (error) {
        console.error('Error loading deck cards:', error);
        showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function createSavedCard(card, deck) {
    const cardDiv = document.createElement('div');
    cardDiv.className = 'saved-card';
    cardDiv.dataset.cardId = card.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥–∏ —è–∑—ã–∫–æ–≤
    const langFromCode = extractLanguageCode(deck.lang_from);
    const langToCode = extractLanguageCode(deck.lang_to);
    const langFromFlag = getLanguageFlag(langFromCode);
    const langToFlag = getLanguageFlag(langToCode);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let imageHtml = '';
    if (card.image_path && card.image_path.trim() !== '') {
        let webImagePath;
        if (card.image_path.startsWith('assets/')) {
            webImagePath = `/static/${card.image_path}`;
        } else if (card.image_path.startsWith('/static/')) {
            webImagePath = card.image_path;
        } else {
            webImagePath = card.image_path.replace('frontend/', '/static/');
        }
        imageHtml = `
            <div class="card-image-container">
                <img src="${webImagePath}" alt="Keyword Image" class="card-image">
            </div>
        `;
    }
    
    cardDiv.innerHTML = `
        <div class="card-content">
            <div class="card-side front">
                <span class="card-flag">${langFromFlag}</span>
                <span class="card-text">${card.front_text}</span>
                <button class="audio-btn" onclick="playAudio('${card.front_text.replace(/'/g, "\\'")}', '${extractLanguageCode(deck.lang_from)}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
            <div class="card-side back">
                <span class="card-flag">${langToFlag}</span>
                <span class="card-text">${card.back_text}</span>
            </div>
        </div>
        <div class="img-btn-container">
        ${imageHtml}
        <div class="card-actions">
            <button class="card-btn delete-card-btn" onclick="deleteCard(${card.id})">
                ${t('delete')}
            </button>
        </div>
        </div>
    `;
    
    return cardDiv;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
window.practiceCard = function(cardId) {
    alert(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
window.deleteCard = async function(cardId) {
    if (!confirm(t('delete_confirmation'))) {
        return;
    }
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        const response = await api.deleteCard(cardId);
        
        console.log(`Card ${cardId} deleted successfully`);
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const cardElement = document.querySelector(`[data-card-id="${cardId}"]`);
        if (cardElement) {
            cardElement.remove();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–¥–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        const cardsCountElement = document.querySelector('.deck-info .cards-count');
        if (cardsCountElement && response.deck_cards_count !== undefined) {
            cardsCountElement.textContent = `${response.deck_cards_count} –∫–∞—Ä—Ç–æ—á–µ–∫`;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        alert(t('card_deleted'));
        
    } catch (error) {
        console.error('Error deleting card:', error);
        alert(t('card_delete_error'));
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
window.playAudio = async function(text, langCode) {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
        const cleanText = text.replace(/<[^>]*>/g, '');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Web Speech API (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
        if ('speechSynthesis' in window && !window.Telegram?.WebApp) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            window.speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(cleanText);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
            const langMap = {
                'en': 'en-US',
                'ru': 'ru-RU',
                'es': 'es-ES', 
                'pt': 'pt-PT',
                'pl': 'pl-PL',
                'de': 'de-DE',
                'fr': 'fr-FR',
            };
            
            utterance.lang = langMap[langCode] || 'en-US';
            utterance.rate = 0.8;
            utterance.pitch = 1;
            utterance.volume = 1;
            
            window.speechSynthesis.speak(utterance);
        } else {
            // –î–ª—è Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ
            try {
                const response = await api.generateAudio({
                    text: cleanText,
                    lang_code: langCode
                });
                
                if (response && response.audio_url) {
                     const audio = new Audio(response.audio_url);
                     
                     // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                     audio.addEventListener('error', async (e) => {
                         console.log('Audio file not found, waiting for generation...');
                         // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                         setTimeout(() => {
                             const retryAudio = new Audio(response.audio_url);
                             retryAudio.play().catch(retryError => {
                                 console.error('Retry audio play failed:', retryError);
                                 alert(t('audio_playback_error'));
                             });
                         }, 1000);
                     });
                     
                     audio.play().catch(error => {
                         console.error('Error playing audio file:', error);
                         // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –º–æ–∂–µ—Ç –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                     });
                 } else {
                     throw new Error('No audio URL received');
                 }
            } catch (error) {
                console.error('Error generating audio:', error);
                alert(t('audio_generation_error'));
            }
        }
    } catch (error) {
        console.error('Error playing audio:', error);
        alert(t('audio_playback_error'));
    }
};

document.addEventListener('DOMContentLoaded', async () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    await initializeApp();
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        initializeI18n();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        const tg = window.Telegram?.WebApp;
        if (tg) {
            tg.ready();
            tg.expand();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        showLoading('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        const existingToken = localStorage.getItem('auth_token');
        if (existingToken) {
            console.log('Found existing token, verifying...');
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
                await api.getCurrentUser();
                console.log('Existing token is valid');
            } catch (error) {
                console.log('Existing token is invalid, re-authenticating...');
                localStorage.removeItem('auth_token');
                localStorage.removeItem('user_data');
            }
        }

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        if (!localStorage.getItem('auth_token')) {
            console.log('Authenticating user...');
            try {
                await api.authenticateUser();
                console.log('Authentication completed successfully');
            } catch (authError) {
                console.error('Authentication failed:', authError);
                throw new Error(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
            }
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å–∫—Ä—ã—Ç–∞

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            await refreshDecks();
            console.log('Decks loaded successfully');
        } catch (decksError) {
            console.error('Failed to load decks:', decksError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—ã: ${decksError.message}`);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        showWindow('main-window');
        
        console.log('App initialized successfully');
        
    } catch (error) {
        console.error('App initialization failed:', error);
        console.error('Error stack:', error.stack);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        showError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${errorMessage}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
        const errorContainer = document.querySelector('.error-message');
        if (errorContainer && !errorContainer.querySelector('.retry-btn')) {
            const retryBtn = document.createElement('button');
            retryBtn.textContent = '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞';
            retryBtn.className = 'retry-btn';
            retryBtn.style.marginTop = '10px';
            retryBtn.onclick = () => {
                location.reload();
            };
            errorContainer.appendChild(retryBtn);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function displayUserInfo() {
    const userData = getUserData();
    const userInfoElement = document.getElementById('user-info');
    
    if (userData && userData.first_name && userInfoElement) {
        userInfoElement.textContent = `üë§ ${userData.first_name}`;
        userInfoElement.style.display = 'block';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–¥
async function refreshDecks() {
    try {
        showLoading(t('loading_decks'));
        const decks = await api.getDecks();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ decks –Ω–µ null –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
        const safeDecks = Array.isArray(decks) ? decks : [];
        renderDecks(safeDecks);
    } catch (error) {
        console.error("Failed to refresh decks:", error);
        showError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—ã');
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
// –§—É–Ω–∫—Ü–∏—è main() —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è initializeApp() –≤–º–µ—Å—Ç–æ –Ω–µ—ë

// ============================================
//             –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// ============================================

// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "+" –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
document.getElementById('add-deck-btn').addEventListener('click', () => {
    showWindow('create-deck-window');
});

// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ù–∞–∑–∞–¥" –≤ –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è
document.getElementById('back-to-main-btn').addEventListener('click', async () => {
    await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
    showWindow('main-window');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –æ–∫–Ω–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
document.getElementById('back-from-cards-btn').addEventListener('click', async () => {
    await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
    showWindow('main-window');
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã
DOMElements.createDeckForm.addEventListener('submit', async (event) => {
    event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã

    const formData = new FormData(event.target);
    const deckData = Object.fromEntries(formData.entries());
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    if (!deckData.name || deckData.name.trim().length < 2) {
        alert(t('deck_name_min_length'));
        return;
    }
    
    if (!deckData.lang_from || !deckData.lang_to) {
        alert(t('select_both_languages'));
        return;
    }
    
    if (deckData.lang_from === deckData.lang_to) {
        alert(t('languages_must_differ'));
        return;
    }
    
    const submitBtn = DOMElements.createDeckForm.querySelector('button[type="submit"]');
    submitBtn.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...';

    try {
        await api.createDeck(deckData);
        event.target.reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        showWindow('main-window'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é
    } catch (error) {
        console.error("Failed to create deck:", error);
        alert(`${t('deck_creation_error')} ${error.message}`); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    } finally {
        submitBtn.disabled = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.textContent = '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É';
    }
 });

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
window.showStatsModal = async function() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        document.getElementById('stats-modal').classList.remove('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modalBody = document.querySelector('.stats-modal-body');
        const originalContent = modalBody.innerHTML;
        modalBody.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 24px; margin-bottom: 10px;">‚è≥</div>
                <p>${t('loading_stats') || 'Loading statistics...'}</p>
            </div>
        `;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = await getStatistics();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        stats.againCards += sessionRepeatStats.againCards;
        stats.goodCards += sessionRepeatStats.goodCards;
        stats.easyCards += sessionRepeatStats.easyCards;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        modalBody.innerHTML = originalContent;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        displayStatistics(stats);
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        createDailyChart(stats.dailyTraining);
        
    } catch (error) {
        console.error('Error loading statistics:', error);
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modalBody = document.querySelector('.stats-modal-body');
        modalBody.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #ff4757;">
                <div style="font-size: 24px; margin-bottom: 10px;">‚ùå</div>
                <p>${t('stats_load_error') || 'Error loading statistics'}</p>
                <button onclick="window.showStatsModal()" style="margin-top: 20px; padding: 10px 20px; background: #f4c300; border: none; border-radius: 10px; cursor: pointer;">${t('try_again')}</button>
            </div>
        `;
    }
}

window.getStatistics = async function() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–¥—ã
        const decks = await api.getDecks();
        
        let totalCards = 0;
        let learnedCards = 0;
        let repeatCards = 0;
        let againCards = 0;
        let goodCards = 0;
        let easyCards = 0;
        const deckDistribution = [];
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–¥–µ
        for (const deck of decks) {
            const cardsResponse = await api.getDeckCards(deck.id);
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º cards
            const cards = cardsResponse && cardsResponse.cards ? cardsResponse.cards : 
                         (Array.isArray(cardsResponse) ? cardsResponse : []);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∞–º–æ–π –∫–æ–ª–æ–¥—ã –∫–∞–∫ –æ—Å–Ω–æ–≤—É
            const deckTotalCards = deck.cards_count || 0;
            const deckRepeatCards = deck.due_count || 0;
            const deckStats = {
                name: deck.name,
                totalCards: deckTotalCards,
                learnedCards: Math.max(0, deckTotalCards - deckRepeatCards),
                repeatCards: deckRepeatCards
            };
            
            totalCards += deckTotalCards;
            learnedCards += deckStats.learnedCards;
            repeatCards += deckRepeatCards;
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            const againCount = Math.floor(deckRepeatCards * 0.4); // 40% - —Å–Ω–æ–≤–∞
            const goodCount = Math.floor(deckRepeatCards * 0.4);   // 40% - —Ö–æ—Ä–æ—à–æ
            const easyCount = deckRepeatCards - againCount - goodCount; // –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ª–µ–≥–∫–æ
            
            againCards += againCount;
            goodCards += goodCount;
            easyCards += easyCount;
            
            deckDistribution.push(deckStats);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        const dailyTraining = await generateDailyTrainingData();
        
        return {
            totalDecks: decks.length,
            totalCards,
            learnedCards,
            repeatCards,
            againCards,
            goodCards,
            easyCards,
            deckDistribution,
            dailyTraining
        };
        
    } catch (error) {
        console.error('Error getting statistics:', error);
        throw error;
    }
}

window.displayStatistics = function(stats) {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    document.getElementById('total-decks-stat').textContent = stats.totalDecks;
    document.getElementById('total-cards-stat').textContent = stats.totalCards;
    document.getElementById('learned-cards-stat').textContent = stats.learnedCards;
    document.getElementById('repeat-cards-stat').textContent = stats.repeatCards;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    document.getElementById('again-cards-stat').textContent = stats.againCards;
    document.getElementById('good-cards-stat').textContent = stats.goodCards;
    document.getElementById('easy-cards-stat').textContent = stats.easyCards;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–æ–¥–∞–º
    const distributionContainer = document.getElementById('deck-distribution-list');
    distributionContainer.innerHTML = '';
    
    stats.deckDistribution.forEach(deck => {
        const deckItem = document.createElement('div');
        deckItem.className = 'deck-item';
        deckItem.innerHTML = `
            <span class="deck-name">${deck.name}</span>
            <span class="deck-cards-count">${deck.totalCards} ${t('total').toLowerCase()}, ${deck.learnedCards} ${t('learned_cards').toLowerCase()}</span>
        `;
        distributionContainer.appendChild(deckItem);
    });
}

window.generateDailyTrainingData = async function() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        const data = await api.getDailyTrainingStats(7);
        return data;
    } catch (error) {
        console.error('Error fetching daily training data:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        const fallbackData = [];
        const today = new Date();
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            
            fallbackData.push({
                date: date.toISOString().split('T')[0],
                cardsStudied: 0
            });
        }
        
        return fallbackData;
    }
};

window.createDailyChart = function(data) {
    const canvas = document.getElementById('daily-chart');
    const ctx = canvas.getContext('2d');
    
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    if (!data || data.length === 0) {
        ctx.fillStyle = '#666';
        ctx.font = '14px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(t('no_data') || 'No data available', canvas.width / 2, canvas.height / 2);
        return;
    }
    
    const padding = 40;
    const chartWidth = canvas.width - 2 * padding;
    const chartHeight = canvas.height - 2 * padding;
    
    const maxValue = Math.max(...data.map(d => d.cardsStudied));
    const barWidth = chartWidth / data.length;
    
    // –†–∏—Å—É–µ–º –æ—Å–∏
    ctx.strokeStyle = '#ddd';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, canvas.height - padding);
    ctx.lineTo(canvas.width - padding, canvas.height - padding);
    ctx.stroke();
    
    // –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±—Ü—ã
    data.forEach((item, index) => {
        const barHeight = (item.cardsStudied / maxValue) * chartHeight;
        const x = padding + index * barWidth + barWidth * 0.1;
        const y = canvas.height - padding - barHeight;
        const width = barWidth * 0.8;
        
        // –°—Ç–æ–ª–±–µ—Ü
        ctx.fillStyle = 'var(--brand-blue)' || '#1800ad';
        ctx.fillRect(x, y, width, barHeight);
        
        // –ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        ctx.fillStyle = '#333';
        ctx.font = '12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(item.cardsStudied, x + width / 2, y - 5);
        
        // –î–∞—Ç–∞ —Å–Ω–∏–∑—É
        ctx.fillStyle = '#666';
        ctx.font = '10px Arial';
        const dateLabel = new Date(item.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        ctx.fillText(dateLabel, x + width / 2, canvas.height - padding + 15);
    });
};

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–ª–æ–¥–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
document.addEventListener('click', (event) => {
    const deckCard = event.target.closest('.deck-card');
    if (deckCard && !event.target.closest('.deck-actions')) {
        // –ö–ª–∏–∫ –ø–æ –∫–æ–ª–æ–¥–µ, –Ω–æ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–ª–æ–¥—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        currentDeckId = parseInt(deckCard.dataset.deckId);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–∞—Ö –∏–∑ –∫–æ–ª–æ–¥—ã
        const langFromElement = deckCard.querySelector('.lang-from');
        const langToElement = deckCard.querySelector('.lang-to');
        
        if (langFromElement && langToElement) {
            const langFrom = langFromElement.textContent;
            const langTo = langToElement.textContent;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —è–∑—ã–∫–∏ —Å —Ñ–ª–∞–≥–∞–º–∏ –≤ –æ–∫–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            const langFromCode = extractLanguageCode(langFrom);
            const langToCode = extractLanguageCode(langTo);
            const langFromFlag = getLanguageFlag(langFromCode);
            const langToFlag = getLanguageFlag(langToCode);
            
            document.getElementById('lang-from-display').textContent = `${langFromFlag}${langFromCode}`;
            document.getElementById('lang-to-display').textContent = `${langToFlag}${langToCode}`;
        }
        
        showWindow('generate-cards-window');
    }
});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('delete-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckName = deckCard.querySelector('.deck-name').textContent;
            
            if (confirm(`${t('deck_deletion_confirm')} "${deckName}"?`)) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–ª–æ–¥—ã –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
                    const deckId = deckCard.dataset.deckId;
                    
                    // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–¥—É —á–µ—Ä–µ–∑ API
                    await api.deleteDeck(deckId);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
                    await refreshDecks();
                } catch (error) {
                    console.error('Failed to delete deck:', error);
                    alert(`${t('deck_deletion_error')} ${error.message}`);
                }
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç–æ—á–∫–∏"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('cards-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckId = parseInt(deckCard.dataset.deckId);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–æ–¥—ã
            await displayDeckCards(deckId);
            
            showWindow('cards-window');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('train-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckId = parseInt(deckCard.dataset.deckId);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            await startTraining(deckId);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑
    document.getElementById('generate-cards-form').addEventListener('submit', async (event) => {
        event.preventDefault();
        
        const phrase = document.getElementById('phrase-input').value.trim();
        const keyword = document.getElementById('keyword-input').value.trim();
        
        if (!phrase || !keyword) {
            alert(t('fill_all_fields'));
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–¥—ã
        const langFrom = document.getElementById('lang-from-display').textContent;
        const langTo = document.getElementById('lang-to-display').textContent;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üáµüáπ PT" -> "pt")
        const langFromCode = extractLanguageCode(langFrom);
        const langToCode = extractLanguageCode(langTo);
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –∫–Ω–æ–ø–∫–µ
            showButtonLoading(true);
            showLoading('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—ã...');
            
            const response = await api.enrichPhrase({
                phrase: phrase,
                keyword: keyword,
                lang_code: langFromCode,
                target_lang: langToCode
            });
            
            if (response) {
                displayGeneratedPhrases(response, langFrom, langTo);
                showWindow('generated-phrases-window');
            } else {
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã');
            }
        } catch (error) {
            console.error('Error generating phrases:', error);
            showError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
        } finally {
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            showButtonLoading(false);
        }
     });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–∫–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
    document.getElementById('save-selected-btn').addEventListener('click', async () => {
        if (selectedPhrases.size === 0) return;
        
        try {
            showLoading(t('saving_cards'));
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            const phrasesToSave = [];
            const allCards = document.querySelectorAll('.phrase-card');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ currentDeckId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (!currentDeckId) {
                showError('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫');
                return;
            }
            
            console.log('Saving cards to deck ID:', currentDeckId);
            
            selectedPhrases.forEach(index => {
                const card = allCards[index];
                if (card) {
                    const originalText = card.querySelector('.phrase-line:first-child .phrase-text').textContent;
                    const translationText = card.querySelector('.phrase-line:last-child .phrase-text').textContent;
                    
                    const cardData = {
                        deck_id: currentDeckId,
                        front_text: originalText,
                        back_text: translationText,
                        difficulty: 1,
                        next_review: new Date().toISOString(),
                        image_path: currentGeneratedData?.image_path || null
                    };
                    
                    console.log('Card data to save:', cardData);
                    phrasesToSave.push(cardData);
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            for (const cardData of phrasesToSave) {
                await api.saveCard(cardData);
            }
            
            alert(t('cards_saved', { count: phrasesToSave.length }));
            await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
            showWindow('main-window');
            
        } catch (error) {
            console.error('Error saving cards:', error);
            showError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
        }
    });
    
    document.getElementById('regenerate-btn').addEventListener('click', () => {
        showWindow('generate-cards-window');
    });
    
    document.getElementById('back-to-main-btn').addEventListener('click', () => {
        showWindow('main-window');
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –æ–∫–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    document.getElementById('back-from-generate-btn').addEventListener('click', async () => {
        await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
        showWindow('main-window');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ"
const selectAllBtn = document.getElementById('select-all-btn');
if (selectAllBtn) {
    selectAllBtn.addEventListener('click', () => {
    const allCards = document.querySelectorAll('.phrase-card');
    const selectAllBtn = document.getElementById('select-all-btn');
    
    if (selectedPhrases.size === allCards.length) {
        // –ï—Å–ª–∏ –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω—ã, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        selectedPhrases.clear();
        allCards.forEach((card, index) => {
            card.classList.remove('selected');
            const selectBtn = card.querySelector('.select-btn');
            selectBtn.textContent = '–í—ã–±—Ä–∞—Ç—å';
            selectBtn.classList.remove('selected');
        });
        selectAllBtn.textContent = '–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ';
    } else {
        // –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ
        selectedPhrases.clear();
        allCards.forEach((card, index) => {
            selectedPhrases.add(index);
            card.classList.add('selected');
            const selectBtn = card.querySelector('.select-btn');
            selectBtn.textContent = '–í—ã–±—Ä–∞–Ω–æ';
            selectBtn.classList.add('selected');
        });
        selectAllBtn.textContent = '–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ';
    }
    
    updatePhrasesCounter();
     });
 }

// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ initializeApp() –≤ DOMContentLoaded

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–æ–º –≤ –∫–Ω–æ–ø–∫–µ
function showButtonLoading(show) {
    const spinner = document.querySelector('#enrich-btn .loading-spinner');
    const btnText = document.querySelector('#enrich-btn .btn-text');
    const button = document.getElementById('enrich-btn');
    
    if (show) {
        spinner.classList.remove('hidden');
        btnText.textContent = t('enriching');
        button.disabled = true;
    } else {
        spinner.classList.add('hidden');
        btnText.textContent = t('enrich_button');
        button.disabled = false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–∫–Ω–µ —Ñ—Ä–∞–∑
function updatePhraseImage(imagePath) {
    const imageElement = document.getElementById('phrase-image');
    if (imagePath && imagePath.trim() !== '') {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        let webImagePath;
        if (imagePath.startsWith('assets/')) {
            webImagePath = `/static/${imagePath}`;
        } else if (imagePath.startsWith('/static/')) {
            webImagePath = imagePath;
        } else {
            webImagePath = imagePath.replace('frontend/', '/static/');
        }
        imageElement.src = webImagePath;
        imageElement.alt = 'Keyword Image';
        console.log('Updated phrase image:', webImagePath);
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º mascot –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        imageElement.src = '/static/assets/icons/mascot.png';
        imageElement.alt = 'Mascot';
        console.log('Using default mascot image');
    }
}

// ===== –õ–û–ì–ò–ö–ê –¢–†–ï–ù–ò–†–û–í–ö–ò =====

let trainingData = {
    cards: [],
    currentIndex: 0,
    totalCards: 0,
    deckInfo: null,
    sessionStartTime: null,
    cardsStudiedInSession: 0
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
let sessionRepeatStats = {
    againCards: 0,
    goodCards: 0,
    easyCards: 0
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
window.startTraining = async function(deckId) {
    try {
        showLoading(t('loading_training_cards'));
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–æ–¥—ã
        const response = await api.getDeckCards(deckId);
        
        if (!response || !response.cards || response.cards.length === 0) {
            showError('–í —ç—Ç–æ–π –∫–æ–ª–æ–¥–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
            return;
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 10
        const shuffledCards = response.cards.sort(() => Math.random() - 0.5);
        const selectedCards = shuffledCards.slice(0, Math.min(10, shuffledCards.length));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        sessionRepeatStats = {
            againCards: 0,
            goodCards: 0,
            easyCards: 0
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        trainingData = {
            cards: response.cards,
            currentIndex: 0,
            totalCards: response.cards.length,
            deckInfo: response.deck,
            sessionStartTime: new Date(),
            cardsStudiedInSession: 0
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        showWindow('training-window');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        loadTrainingCard();
        
    } catch (error) {
        console.error('Error starting training:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
    }
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
function loadTrainingCard() {
    const currentCard = trainingData.cards[trainingData.currentIndex];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateTrainingProgress();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageElement = document.getElementById('training-image');
    if (currentCard.image_path && currentCard.image_path.trim() !== '') {
        const webImagePath = currentCard.image_path.replace('frontend/', '/static/');
        imageElement.src = webImagePath;
        imageElement.alt = 'Card Image';
    } else {
        imageElement.src = '/static/assets/icons/mascot.png';
        imageElement.alt = 'Mascot';
    }
    
    // –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
    const isForward = Math.random() < 0.5; // 50% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    currentCard.isForward = isForward;
    
    const phraseElement = document.getElementById('training-phrase');
    const answerInput = document.getElementById('answer-input');
    
    if (isForward) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ, –æ–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
        phraseElement.textContent = currentCard.front_text;
        answerInput.placeholder = t('enter_translation');
        answerInput.setAttribute('data-reverse', 'false');
        currentCard.expectedAnswer = currentCard.back_text;
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥, –æ–∂–∏–¥–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ
        phraseElement.textContent = currentCard.back_text;
        answerInput.placeholder = t('enter_phrase');
        answerInput.setAttribute('data-reverse', 'true');
        currentCard.expectedAnswer = currentCard.front_text;
    }
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    answerInput.value = '';
    answerInput.className = 'answer-input';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
    document.getElementById('correct-answer').classList.add('hidden');
    document.getElementById('rating-buttons').classList.add('hidden');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
    document.getElementById('check-btn').style.display = 'block';
    document.getElementById('check-btn').disabled = false;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateTrainingProgress() {
    const currentCardNum = trainingData.currentIndex + 1;
    const totalCards = trainingData.totalCards;
    const progressPercent = (currentCardNum / totalCards) * 100;
    
    document.getElementById('current-card').textContent = currentCardNum;
    document.getElementById('total-cards').textContent = totalCards;
    document.getElementById('progress-fill').style.width = `${progressPercent}%`;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
function checkAnswer() {
    const userAnswer = document.getElementById('answer-input').value.trim();
    const currentCard = trainingData.cards[trainingData.currentIndex];
    const correctAnswer = currentCard.expectedAnswer;
    const answerInput = document.getElementById('answer-input');
    
    if (!userAnswer) {
        alert(t('enter_answer'));
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
    const isCorrect = userAnswer.toLowerCase() === correctAnswer.toLowerCase();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö –æ—Ü–µ–Ω–∫–∏
    currentCard.lastAnswerCorrect = isCorrect;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
    if (isCorrect) {
        answerInput.classList.add('correct');
        answerInput.classList.remove('incorrect');
    } else {
        answerInput.classList.add('incorrect');
        answerInput.classList.remove('correct');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    const correctAnswerDiv = document.getElementById('correct-answer');
    correctAnswerDiv.textContent = `${t('correct_answer')} ${correctAnswer}`;
        correctAnswerDiv.classList.remove('hidden');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
    document.getElementById('check-btn').style.display = 'none';
    document.getElementById('rating-buttons').classList.remove('hidden');
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
function nextCard() {
    trainingData.currentIndex++;
    
    if (trainingData.currentIndex >= trainingData.totalCards) {
        // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        finishTraining();
    } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        loadTrainingCard();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async function finishTraining() {
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if (trainingData.cardsStudiedInSession > 0 && trainingData.sessionStartTime) {
        try {
            const sessionDuration = Math.floor((new Date() - trainingData.sessionStartTime) / 1000);
            await api.recordTrainingSession(trainingData.cardsStudiedInSession, sessionDuration);
            console.log(`Training session recorded: ${trainingData.cardsStudiedInSession} cards in ${sessionDuration} seconds`);
        } catch (error) {
            console.error('Error recording training session:', error);
        }
    }
    
    alert(t('training_completed', { count: trainingData.totalCards }));
    showWindow('main-window');
    refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–æ–¥
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
document.getElementById('check-btn').addEventListener('click', checkAnswer);

document.getElementById('again-btn').addEventListener('click', async () => {
    await handleCardRating('again');
});

document.getElementById('good-btn').addEventListener('click', async () => {
    await handleCardRating('good');
});

document.getElementById('easy-btn').addEventListener('click', async () => {
    await handleCardRating('easy');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function updateRepeatStatsDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ DOM —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const againStat = document.getElementById('again-cards-stat');
    const goodStat = document.getElementById('good-cards-stat');
    const easyStat = document.getElementById('easy-cards-stat');
    
    if (againStat) againStat.textContent = sessionRepeatStats.againCards;
    if (goodStat) goodStat.textContent = sessionRepeatStats.goodCards;
    if (easyStat) easyStat.textContent = sessionRepeatStats.easyCards;
    
    console.log('Updated repeat stats:', sessionRepeatStats);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
async function handleCardRating(rating) {
    const currentCard = trainingData.cards[trainingData.currentIndex];
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await api.updateCardStatus({
            card_id: currentCard.id,
            rating: rating
        });
        
        console.log(`Card ${currentCard.id} marked as "${rating}", deck due count: ${response.deck_due_count}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
        if (trainingData.deckInfo && response.deck_due_count !== undefined) {
            trainingData.deckInfo.due_count = response.deck_due_count;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        console.log(`Before rating ${rating}:`, JSON.stringify(sessionRepeatStats));
        switch (rating) {
            case 'again':
                sessionRepeatStats.againCards++;
                console.log('Incremented againCards to', sessionRepeatStats.againCards);
                break;
            case 'good':
                sessionRepeatStats.goodCards++;
                console.log('Incremented goodCards to', sessionRepeatStats.goodCards);
                break;
            case 'easy':
                sessionRepeatStats.easyCards++;
                console.log('Incremented easyCards to', sessionRepeatStats.easyCards);
                break;
        }
        
        console.log(`After rating ${rating}:`, JSON.stringify(sessionRepeatStats));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        updateRepeatStatsDisplay();
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–µ—Å—Å–∏–∏
        trainingData.cardsStudiedInSession++;
        
    } catch (error) {
        console.error('Error updating card status:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    nextCard();
}

document.getElementById('back-from-training-btn').addEventListener('click', () => {
    if (confirm(t('training_interruption'))) {
        showWindow('main-window');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
document.getElementById('answer-input').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        const checkBtn = document.getElementById('check-btn');
        if (checkBtn.style.display !== 'none') {
            checkAnswer();
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
document.getElementById('play-audio-btn').addEventListener('click', () => {
    const currentCard = trainingData.cards[trainingData.currentIndex];
    if (currentCard) {
        const text = currentCard.isForward ? currentCard.front_text : currentCard.back_text;
        const langCode = currentCard.isForward ? 
            extractLanguageCode(trainingData.deckInfo.lang_from) : 
            extractLanguageCode(trainingData.deckInfo.lang_to);
        playAudio(text, langCode);
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
document.getElementById('settings-btn').addEventListener('click', () => {
    const modal = document.getElementById('settings-modal');
    modal.classList.remove('hidden');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –≤ radio buttons
    const currentLang = getCurrentLanguage();
    const languageRadio = document.querySelector(`input[name="language"][value="${currentLang}"]`);
    if (languageRadio) {
        languageRadio.checked = true;
    }
});

document.getElementById('close-settings-modal').addEventListener('click', () => {
    const modal = document.getElementById('settings-modal');
    modal.classList.add('hidden');
});

document.getElementById('cancel-settings-btn').addEventListener('click', () => {
    const modal = document.getElementById('settings-modal');
    modal.classList.add('hidden');
});

document.getElementById('save-settings-btn').addEventListener('click', () => {
    const selectedLanguage = document.querySelector('input[name="language"]:checked')?.value;
    
    if (selectedLanguage && selectedLanguage !== getCurrentLanguage()) {
        setLanguage(selectedLanguage);
    }
    
    const modal = document.getElementById('settings-modal');
    modal.classList.add('hidden');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.getElementById('settings-modal').addEventListener('click', (e) => {
    if (e.target.id === 'settings-modal') {
        const modal = document.getElementById('settings-modal');
        modal.classList.add('hidden');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
document.getElementById('stats-btn').addEventListener('click', () => {
    showStatsModal();
});

document.getElementById('close-stats-modal').addEventListener('click', () => {
    document.getElementById('stats-modal').classList.add('hidden');
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    if (document.getElementById('decks-container').innerHTML.trim() === '') {
        refreshDecks();
    }
});

document.getElementById('close-stats-btn').addEventListener('click', () => {
    document.getElementById('stats-modal').classList.add('hidden');
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    if (document.getElementById('decks-container').innerHTML.trim() === '') {
        refreshDecks();
    }
});

document.getElementById('stats-modal').addEventListener('click', (e) => {
    if (e.target === document.getElementById('stats-modal')) {
        document.getElementById('stats-modal').classList.add('hidden');
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
        if (document.getElementById('decks-container').innerHTML.trim() === '') {
            refreshDecks();
        }
    }
});