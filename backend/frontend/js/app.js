// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
import { api, setAuthToken } from '/static/js/api.js';
import { DOMElements, showWindow, renderDecks, showLoading, showError } from '/static/js/ui.js';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let currentGeneratedData = null;
let selectedPhrases = new Set();
let currentDeckId = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractLanguageCode(langText) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "üáµüáπ PT" -> "pt"
    const match = langText.match(/([A-Z]{2})/);
    return match ? match[1].toLowerCase() : 'en';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –ø–æ –∫–æ–¥—É —è–∑—ã–∫–∞
function getFlagByCode(langCode) {
    const flags = {
        'en': 'üá∫üá∏',
        'ru': 'üá∑üá∫', 
        'es': 'üá™üá∏',
        'pt': 'üáµüáπ',
        'pl': 'üáµüá±'
    };
    return flags[langCode] || 'üåê';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
function displayGeneratedPhrases(data, langFrom, langTo) {
    currentGeneratedData = data;
    selectedPhrases.clear();
    
    const container = document.getElementById('phrases-container');
    container.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑
    const allPhrases = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É
    if (data.original_phrase) {
        allPhrases.push({
            original: data.original_phrase.original,
            translation: data.original_phrase.translation,
            isOriginal: true
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    if (data.additional_examples) {
        data.additional_examples.forEach(example => {
            allPhrases.push({
                original: example.original,
                translation: example.translation,
                isOriginal: false
            });
        });
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã
    allPhrases.forEach((phrase, index) => {
        const phraseCard = createPhraseCard(phrase, index, langFrom, langTo);
        container.appendChild(phraseCard);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    updatePhrasesCounter(allPhrases.length, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    updatePhraseImage(data.image_path);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑—ã
function createPhraseCard(phrase, index, langFrom, langTo) {
    const card = document.createElement('div');
    card.className = 'phrase-card';
    card.dataset.index = index;
    
    card.innerHTML = `
        <div class="phrase-content">
            <div class="phrase-line">
                <span class="flag-emoji">${langFrom.split(' ')[0]}</span>
                <span class="phrase-text">${phrase.original}</span>
                <button class="audio-btn" onclick="playAudio('${phrase.original.replace(/'/g, "\\'").replace(/"/g, '\\"')}', '${extractLanguageCode(langFrom)}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
            <div class="phrase-line">
                <span class="flag-emoji">${langTo.split(' ')[0]}</span>
                <span class="phrase-text">${phrase.translation}</span>
                <button class="audio-btn" onclick="playAudio('${phrase.translation.replace(/'/g, "\\'").replace(/"/g, '\\"')}', '${extractLanguageCode(langTo)}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
        </div>
        <div class="phrase-actions">
            <button class="phrase-btn select-btn" onclick="togglePhraseSelection(${index})">
                –í—ã–±—Ä–∞—Ç—å
            </button>
            <button class="phrase-btn delete-phrase-btn" onclick="deletePhraseCard(${index})">
                –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;
    
    return card;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∑—ã
window.togglePhraseSelection = function(index) {
    const card = document.querySelector(`[data-index="${index}"]`);
    const button = card.querySelector('.select-btn');
    
    if (selectedPhrases.has(index)) {
        selectedPhrases.delete(index);
        card.classList.remove('selected');
        button.textContent = '–í—ã–±—Ä–∞—Ç—å';
        button.classList.remove('selected');
    } else {
        selectedPhrases.add(index);
        card.classList.add('selected');
        button.textContent = '–í—ã–±—Ä–∞–Ω–æ';
        button.classList.add('selected');
    }
    
    updatePhrasesCounter();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑—ã
window.deletePhraseCard = function(index) {
    const card = document.querySelector(`[data-index="${index}"]`);
    if (card) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
        selectedPhrases.delete(index);
        card.remove();
        updatePhrasesCounter();
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function updatePhrasesCounter(totalCount = null, selectedCount = null) {
    if (totalCount === null) {
        totalCount = document.querySelectorAll('.phrase-card').length;
    }
    if (selectedCount === null) {
        selectedCount = selectedPhrases.size;
    }
    
    document.getElementById('total-phrases-count').textContent = totalCount;
    document.getElementById('selected-phrases-count').textContent = selectedCount;
    document.getElementById('save-count').textContent = selectedCount;
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveBtn = document.getElementById('save-selected-btn');
    saveBtn.disabled = selectedCount === 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–ª–æ–¥—ã
async function displayDeckCards(deckId) {
    try {
        showLoading('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏...');
        
        const response = await api.getDeckCards(deckId);
        
        if (response && response.deck && response.cards) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ
            document.getElementById('cards-deck-name').textContent = response.deck.name;
            document.getElementById('cards-lang-from-display').textContent = response.deck.lang_from;
            document.getElementById('cards-lang-to-display').textContent = response.deck.lang_to;
            
            const container = document.getElementById('cards-container');
            const noCardsMessage = document.getElementById('no-cards-message');
            
            container.innerHTML = '';
            
            if (response.cards.length === 0) {
                noCardsMessage.style.display = 'block';
                container.style.display = 'none';
            } else {
                noCardsMessage.style.display = 'none';
                container.style.display = 'flex';
                
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
                response.cards.forEach(card => {
                    const cardElement = createSavedCard(card, response.deck);
                    container.appendChild(cardElement);
                });
            }
        }
    } catch (error) {
        console.error('Error loading deck cards:', error);
        showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function createSavedCard(card, deck) {
    const cardDiv = document.createElement('div');
    cardDiv.className = 'saved-card';
    cardDiv.dataset.cardId = card.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥–∏ —è–∑—ã–∫–æ–≤
    const langFromFlag = deck.lang_from.split(' ')[0];
    const langToFlag = deck.lang_to.split(' ')[0];
    
    cardDiv.innerHTML = `
        <div class="card-content">
            <div class="card-side front">
                <span class="card-flag">${langFromFlag}</span>
                <span class="card-text">${card.front_text}</span>
                <button class="audio-btn" onclick="playAudio('${card.front_text.replace(/'/g, "\\'").replace(/"/g, '\\"')}', '${extractLanguageCode(deck.lang_from)}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
            <div class="card-side back">
                <span class="card-flag">${langToFlag}</span>
                <span class="card-text">${card.back_text}</span>
                <button class="audio-btn" onclick="playAudio('${card.back_text.replace(/'/g, "\\'").replace(/"/g, '\\"')}', '${extractLanguageCode(deck.lang_to)}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
        </div>
        <div class="card-actions">
            <button class="card-btn practice-btn" onclick="practiceCard(${card.id})">
                –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button class="card-btn delete-card-btn" onclick="deleteCard(${card.id})">
                –£–¥–∞–ª–∏—Ç—å
            </button>
        </div>
    `;
    
    return cardDiv;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
window.practiceCard = function(cardId) {
    alert(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
window.deleteCard = function(cardId) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç–æ—á–∫—É?')) {
        alert(`–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –ø–æ–∑–∂–µ`);
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
window.playAudio = async function(text, langCode) {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
        const cleanText = text.replace(/<[^>]*>/g, '');
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Web Speech API (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
        if ('speechSynthesis' in window && !window.Telegram?.WebApp) {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            window.speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(cleanText);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
            const langMap = {
                'en': 'en-US',
                'ru': 'ru-RU',
                'es': 'es-ES', 
                'pt': 'pt-PT',
                'pl': 'pl-PL'
            };
            
            utterance.lang = langMap[langCode] || 'en-US';
            utterance.rate = 0.8;
            utterance.pitch = 1;
            utterance.volume = 1;
            
            window.speechSynthesis.speak(utterance);
        } else {
            // –î–ª—è Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ
            try {
                const response = await api.generateAudio({
                    text: cleanText,
                    lang_code: langCode
                });
                
                if (response && response.audio_url) {
                     const audio = new Audio(response.audio_url);
                     
                     // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                     audio.addEventListener('error', async (e) => {
                         console.log('Audio file not found, waiting for generation...');
                         // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                         setTimeout(() => {
                             const retryAudio = new Audio(response.audio_url);
                             retryAudio.play().catch(retryError => {
                                 console.error('Retry audio play failed:', retryError);
                                 alert('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ');
                             });
                         }, 1000);
                     });
                     
                     audio.play().catch(error => {
                         console.error('Error playing audio file:', error);
                         // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –º–æ–∂–µ—Ç –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                     });
                 } else {
                     throw new Error('No audio URL received');
                 }
            } catch (error) {
                console.error('Error generating audio:', error);
                alert('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ');
            }
        }
    } catch (error) {
        console.error('Error playing audio:', error);
        alert('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ');
    }
};

document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram?.WebApp || {};
    if (tg.ready) {
        tg.ready();
    }

    // ============================================
    //               –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
    // ============================================

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–¥
    async function refreshDecks() {
        try {
            showLoading('–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –∫–æ–ª–æ–¥—ã...');
            const decks = await api.getDecks();
            renderDecks(decks);
        } catch (error) {
            console.error("Failed to refresh decks:", error);
            showError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—ã');
        }
    }

    // –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    async function main() {
    try {
        let authData;

        // –ü–†–û–í–ï–†–ö–ê –ù–ê –û–¢–õ–ê–î–û–ß–ù–´–ô –†–ï–ñ–ò–ú
        const isDebugMode = (window.location.hostname === 'localhost' || 
                           window.location.hostname === '127.0.0.1' || 
                           window.location.hostname.includes('fly.dev') ||
                           window.location.protocol === 'file:');

        if (tg.initDataUnsafe && Object.keys(tg.initDataUnsafe).length > 0 && !isDebugMode) {
            // –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (–≤–Ω—É—Ç—Ä–∏ Telegram)
            console.log("Running in Production Mode (inside Telegram)");
            authData = await api.authenticate(tg.initData);
        } else if (isDebugMode) {
            // –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (–ª–æ–∫–∞–ª—å–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
            console.log("Running in Debug Mode (localhost)");
            authData = await api.authenticateDebug(); // –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ API
        } else {
            // –ó–∞–ø—É—Å–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ, –Ω–æ –Ω–µ –ª–æ–∫–∞–ª—å–Ω–æ
            throw new Error("Telegram.WebApp.initData is empty. Please run the app inside Telegram.");
        }
        
        // 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        setAuthToken(authData.access_token);
        console.log("Authentication successful, token set.");
        
        // 2. –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–ª–æ–¥
        await refreshDecks();

        // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        showWindow('main-window');
    } catch (error) {
        console.error("Initialization failed:", error);
        DOMElements.decksContainer.innerHTML = `<p style='color: red;'>${error.message}</p>`;
    }
}
    // ============================================
    //             –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
    // ============================================

    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "+" –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
    document.getElementById('add-deck-btn').addEventListener('click', () => {
        showWindow('create-deck-window');
    });

    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ù–∞–∑–∞–¥" –≤ –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è
    document.getElementById('back-to-main-btn').addEventListener('click', async () => {
        await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
        showWindow('main-window');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –æ–∫–Ω–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
    document.getElementById('back-from-cards-btn').addEventListener('click', async () => {
        await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
        showWindow('main-window');
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã
    DOMElements.createDeckForm.addEventListener('submit', async (event) => {
        event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã

        const formData = new FormData(event.target);
        const deckData = Object.fromEntries(formData.entries());
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
        if (!deckData.name || deckData.name.trim().length < 2) {
            alert('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
            return;
        }
        
        if (!deckData.lang_from || !deckData.lang_to) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–∞ —è–∑—ã–∫–∞');
            return;
        }
        
        if (deckData.lang_from === deckData.lang_to) {
            alert('–ò–∑—É—á–∞–µ–º—ã–π —è–∑—ã–∫ –∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è');
            return;
        }
        
        const submitBtn = DOMElements.createDeckForm.querySelector('button[type="submit"]');
        submitBtn.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
        submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...';

        try {
            await api.createDeck(deckData);
            event.target.reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            showWindow('main-window'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
            await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é
        } catch (error) {
            console.error("Failed to create deck:", error);
            alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–æ–¥—ã: ${error.message}`); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        } finally {
            submitBtn.disabled = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
            submitBtn.textContent = '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É';
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ header –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    document.addEventListener('click', (event) => {
        if (event.target.closest('.clickable-header')) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞ –Ω–µ–º
            const mainWindow = document.getElementById('main-window');
            if (mainWindow.classList.contains('hidden')) {
                showWindow('main-window');
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–ª–æ–¥–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    document.addEventListener('click', (event) => {
        const deckCard = event.target.closest('.deck-card');
        if (deckCard && !event.target.closest('.deck-actions')) {
            // –ö–ª–∏–∫ –ø–æ –∫–æ–ª–æ–¥–µ, –Ω–æ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–ª–æ–¥—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
            currentDeckId = parseInt(deckCard.dataset.deckId);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–∞—Ö –∏–∑ –∫–æ–ª–æ–¥—ã
            const langFromElement = deckCard.querySelector('.lang-from');
            const langToElement = deckCard.querySelector('.lang-to');
            
            if (langFromElement && langToElement) {
                const langFrom = langFromElement.textContent;
                const langTo = langToElement.textContent;
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —è–∑—ã–∫–∏ –≤ –æ–∫–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
                document.getElementById('lang-from-display').textContent = langFrom;
                document.getElementById('lang-to-display').textContent = langTo;
            }
            
            showWindow('generate-cards-window');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('delete-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckName = deckCard.querySelector('.deck-name').textContent;
            
            if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ–ª–æ–¥—É "${deckName}"?`)) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–ª–æ–¥—ã –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
                    const deckId = deckCard.dataset.deckId;
                    
                    // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–¥—É —á–µ—Ä–µ–∑ API
                    await api.deleteDeck(deckId);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
                    await refreshDecks();
                } catch (error) {
                    console.error('Failed to delete deck:', error);
                    alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–¥—ã: ${error.message}`);
                }
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç–æ—á–∫–∏"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('cards-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckId = parseInt(deckCard.dataset.deckId);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–æ–¥—ã
            await displayDeckCards(deckId);
            
            showWindow('cards-window');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑
    document.getElementById('generate-cards-form').addEventListener('submit', async (event) => {
        event.preventDefault();
        
        const phrase = document.getElementById('phrase-input').value.trim();
        const keyword = document.getElementById('keyword-input').value.trim();
        
        if (!phrase || !keyword) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–¥—ã
        const langFrom = document.getElementById('lang-from-display').textContent;
        const langTo = document.getElementById('lang-to-display').textContent;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üáµüáπ PT" -> "pt")
        const langFromCode = extractLanguageCode(langFrom);
        const langToCode = extractLanguageCode(langTo);
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –∫–Ω–æ–ø–∫–µ
            showButtonLoading(true);
            showLoading('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—ã...');
            
            const response = await api.enrichPhrase({
                phrase: phrase,
                keyword: keyword,
                lang_code: langFromCode,
                target_lang: langToCode
            });
            
            if (response) {
                displayGeneratedPhrases(response, langFrom, langTo);
                showWindow('generated-phrases-window');
            } else {
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã');
            }
        } catch (error) {
            console.error('Error generating phrases:', error);
            showError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
        } finally {
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            showButtonLoading(false);
        }
     });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–∫–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
    document.getElementById('save-selected-btn').addEventListener('click', async () => {
        if (selectedPhrases.size === 0) return;
        
        try {
            showLoading('–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏...');
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            const phrasesToSave = [];
            const allCards = document.querySelectorAll('.phrase-card');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ currentDeckId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (!currentDeckId) {
                showError('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫');
                return;
            }
            
            console.log('Saving cards to deck ID:', currentDeckId);
            
            selectedPhrases.forEach(index => {
                const card = allCards[index];
                if (card) {
                    const originalText = card.querySelector('.phrase-line:first-child .phrase-text').textContent;
                    const translationText = card.querySelector('.phrase-line:last-child .phrase-text').textContent;
                    
                    const cardData = {
                        deck_id: currentDeckId,
                        front_text: originalText,
                        back_text: translationText,
                        difficulty: 1,
                        next_review: new Date().toISOString(),
                        image_path: currentGeneratedData?.image_path || null
                    };
                    
                    console.log('Card data to save:', cardData);
                    phrasesToSave.push(cardData);
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            for (const cardData of phrasesToSave) {
                await api.saveCard(cardData);
            }
            
            alert(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${phrasesToSave.length} –∫–∞—Ä—Ç–æ—á–µ–∫!`);
            await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
            showWindow('main-window');
            
        } catch (error) {
            console.error('Error saving cards:', error);
            showError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
        }
    });
    
    document.getElementById('regenerate-btn').addEventListener('click', () => {
        showWindow('generate-cards-window');
    });
    
    document.getElementById('back-to-main-btn').addEventListener('click', () => {
        showWindow('main-window');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ"
    const selectAllBtn = document.getElementById('select-all-btn');
    if (selectAllBtn) {
        selectAllBtn.addEventListener('click', () => {
        const allCards = document.querySelectorAll('.phrase-card');
        const selectAllBtn = document.getElementById('select-all-btn');
        
        if (selectedPhrases.size === allCards.length) {
            // –ï—Å–ª–∏ –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω—ã, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            selectedPhrases.clear();
            allCards.forEach((card, index) => {
                card.classList.remove('selected');
                const selectBtn = card.querySelector('.select-btn');
                selectBtn.textContent = '–í—ã–±—Ä–∞—Ç—å';
                selectBtn.classList.remove('selected');
            });
            selectAllBtn.textContent = '–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ';
        } else {
            // –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ
            selectedPhrases.clear();
            allCards.forEach((card, index) => {
                selectedPhrases.add(index);
                card.classList.add('selected');
                const selectBtn = card.querySelector('.select-btn');
                selectBtn.textContent = '–í—ã–±—Ä–∞–Ω–æ';
                selectBtn.classList.add('selected');
            });
            selectAllBtn.textContent = '–°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ';
        }
        
        updatePhrasesCounter();
         });
     }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    main();
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–æ–º –≤ –∫–Ω–æ–ø–∫–µ
function showButtonLoading(show) {
    const spinner = document.querySelector('#enrich-btn .loading-spinner');
    const btnText = document.querySelector('#enrich-btn .btn-text');
    const button = document.getElementById('enrich-btn');
    
    if (show) {
        spinner.classList.remove('hidden');
        btnText.textContent = '–û–±–æ–≥–∞—â–∞–µ–º...';
        button.disabled = true;
    } else {
        spinner.classList.add('hidden');
        btnText.textContent = '–û–±–æ–≥–∞—Ç–∏—Ç—å';
        button.disabled = false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–∫–Ω–µ —Ñ—Ä–∞–∑
function updatePhraseImage(imagePath) {
    const imageElement = document.getElementById('phrase-image');
    if (imagePath && imagePath.trim() !== '') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        imageElement.src = imagePath;
        imageElement.alt = 'Keyword Image';
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º mascot –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        imageElement.src = '/static/assets/icons/mascot.png';
        imageElement.alt = 'Mascot';
    }
}