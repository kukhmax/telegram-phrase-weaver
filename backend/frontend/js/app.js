// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
import { api, setAuthToken, getUserData } from '/static/js/api.js';
import { DOMElements, showWindow, renderDecks, showLoading, showError } from '/static/js/ui.js';
import { t, setLanguage, getCurrentLanguage, updateInterface, initializeI18n } from '/static/js/i18n.js';
// CSS –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ HTML, –Ω–µ –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let currentGeneratedData = null;
let selectedPhrases = new Set();
let currentDeckId = null;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ —è–∑—ã–∫–∞
function getLanguageFlag(langCode) {
    const flags = {
        'en': 'üá∫üá∏',
        'pl': 'üáµüá±',
        'es': 'üá™üá∏',
        'fr': 'üá´üá∑',
        'de': 'üá©üá™',
        'pt': 'üáµüáπ',
        'ru': 'üá∑üá∫',
    };
    return flags[langCode] || langCode;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–¥–∞ —è–∑—ã–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractLanguageCode(langText) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "üáµüáπ PT" –∏–ª–∏ "üá∫üá∏EN" -> "pt", "en"
    if (langText.length === 2) {
        return langText.toLowerCase();
    }
    
    // –î–ª—è —Å—Ç—Ä–æ–∫ —Å —Ñ–ª–∞–≥–∞–º–∏ –∏ –∫–æ–¥–∞–º–∏ —è–∑—ã–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä "üáµüáπ PT" –∏–ª–∏ "üá∫üá∏EN")
    // –ò—â–µ–º 2 –±—É–∫–≤—ã –ø–æ—Å–ª–µ –ø—Ä–æ–±–µ–ª–∞ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
    const match = langText.match(/\s([A-Z]{2})$|([A-Z]{2})$/i);
    if (match) {
        const code = (match[1] || match[2]).toLowerCase();
        console.log(`Extracted language code: '${code}' from '${langText}'`);
        return code;
    }
    
    console.warn(`Could not extract language code from '${langText}', defaulting to 'en'`);
    return 'en';
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
function displayGeneratedPhrases(data, langFrom, langTo) {
    currentGeneratedData = data;
    selectedPhrases.clear();
    
    const container = document.getElementById('phrases-container');
    container.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑
    const allPhrases = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—Ä–∞–∑—É
    if (data.original_phrase) {
        allPhrases.push({
            original: data.original_phrase.original,
            translation: data.original_phrase.translation,
            isOriginal: true
        });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    if (data.additional_examples) {
        data.additional_examples.forEach(example => {
            allPhrases.push({
                original: example.original,
                translation: example.translation,
                isOriginal: false
            });
        });
    }
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∑—ã
    allPhrases.forEach((phrase, index) => {
        const phraseCard = createPhraseCard(phrase, index, langFrom, langTo);
        container.appendChild(phraseCard);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    updatePhrasesCounter(allPhrases.length, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    updatePhraseImage(data.image_path);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑—ã
function createPhraseCard(phrase, index, langFrom, langTo) {
    const card = document.createElement('div');
    card.className = 'phrase-card';
    card.dataset.index = index;

    const langFromCode = extractLanguageCode(langFrom);
    const langToCode = extractLanguageCode(langTo);
    
    const langFromFlag = getLanguageFlag(extractLanguageCode(langFrom));
    const langToFlag = getLanguageFlag(extractLanguageCode(langTo));
    
    card.innerHTML = `
        <div class="phrase-content">
            
            <div class="phrase-line">
                <span class="flag-emoji">${langFromFlag}</span>
                <span class="phrase-text">${phrase.original}</span>
                <button class="audio-btn" onclick="playAudio('${phrase.original.replace(/'/g, "\\'")}', '${langFromCode}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
            <div class="phrase-line">
                <span class="flag-emoji">${langToFlag}</span>
                <span class="phrase-text">${phrase.translation}</span>
                <button class="audio-btn" onclick="playAudio('${phrase.translation.replace(/'/g, "\\'")}', '${langToCode}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>

        </div>
        <div class="phrase-actions">
            <button class="phrase-btn select-btn" onclick="togglePhraseSelection(${index})">
                ${t('select') || '–í—ã–±—Ä–∞—Ç—å'}
            </button>
            <button class="phrase-btn delete-phrase-btn" onclick="deletePhraseCard(${index})">
                ${t('delete')}
            </button>
        </div>
    `;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑—ã
    if (!phrase.keyword) {
        phrase.keyword = findKeywordInPhrase(phrase.original) || '';
    }
    
    return card;
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ —Ñ—Ä–∞–∑—ã
window.updatePhraseKeyword = function(index, keyword) {
    if (currentGeneratedData && currentGeneratedData.phrases && currentGeneratedData.phrases[index]) {
        currentGeneratedData.phrases[index].keyword = keyword.trim();
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:', {
            index: index,
            phrase: currentGeneratedData.phrases[index].original,
            keyword: keyword.trim()
        });
    }
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
window.suggestKeywords = function(index) {
    if (!currentGeneratedData || !currentGeneratedData.phrases || !currentGeneratedData.phrases[index]) {
        return;
    }
    
    const phrase = currentGeneratedData.phrases[index].original;
    const words = phrase.toLowerCase().split(/\s+/).map(word => 
        word.replace(/[^\p{L}]/gu, '')
    ).filter(word => word.length > 2);
    
    // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    const stopWords = new Set(['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', '–∏', '–≤', '–Ω–µ', '–Ω–∞', '—Å', '–æ–Ω', '–∞', '–∫–∞–∫', '—á—Ç–æ', '—ç—Ç–æ']);
    
    const candidates = words.filter(word => !stopWords.has(word)).sort((a, b) => b.length - a.length);
    
    if (candidates.length > 0) {
        const suggestion = candidates[0];
        const input = document.querySelector(`input[data-index="${index}"]`);
        if (input) {
            input.value = suggestion;
            updatePhraseKeyword(index, suggestion);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∑—ã
window.togglePhraseSelection = function(index) {
    const card = document.querySelector(`[data-index="${index}"]`);
    const button = card.querySelector('.select-btn');
    
    if (selectedPhrases.has(index)) {
        selectedPhrases.delete(index);
        card.classList.remove('selected');
        button.textContent = '–í—ã–±—Ä–∞—Ç—å';
        button.classList.remove('selected');
    } else {
        selectedPhrases.add(index);
        card.classList.add('selected');
        button.textContent = '–í—ã–±—Ä–∞–Ω–æ';
        button.classList.add('selected');
    }
    
    updatePhrasesCounter();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ—Ä–∞–∑—ã
window.deletePhraseCard = function(index) {
    const card = document.querySelector(`[data-index="${index}"]`);
    if (card) {
        // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
        selectedPhrases.delete(index);
        card.remove();
        updatePhrasesCounter();
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
function updatePhrasesCounter(totalCount = null, selectedCount = null) {
    if (totalCount === null) {
        totalCount = document.querySelectorAll('.phrase-card').length;
    }
    if (selectedCount === null) {
        selectedCount = selectedPhrases.size;
    }
    
    document.getElementById('total-phrases-count').textContent = totalCount;
    document.getElementById('selected-phrases-count').textContent = selectedCount;
    document.getElementById('save-count').textContent = selectedCount;
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const saveBtn = document.getElementById('save-selected-btn');
    saveBtn.disabled = selectedCount === 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–æ–ª–æ–¥—ã
async function displayDeckCards(deckId) {
    try {
        showLoading(t('loading_cards'));
        
        const response = await api.getDeckCards(deckId);
        
        if (response && response.deck && response.cards) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ
            document.getElementById('cards-deck-name').textContent = response.deck.name;
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —è–∑—ã–∫–∏ —Å —Ñ–ª–∞–≥–∞–º–∏ –≤ –æ–∫–Ω–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                const langFromCode = extractLanguageCode(response.deck.lang_from);
                const langToCode = extractLanguageCode(response.deck.lang_to);
                const langFromFlag = getLanguageFlag(langFromCode);
                const langToFlag = getLanguageFlag(langToCode);
                
                document.getElementById('cards-lang-from-display').textContent = `${langFromFlag}${langFromCode}`;
                document.getElementById('cards-lang-to-display').textContent = `${langToFlag}${langToCode}`;
            
            const container = document.getElementById('cards-container');
            const noCardsMessage = document.getElementById('no-cards-message');
            
            container.innerHTML = '';
            
            if (response.cards.length === 0) {
                noCardsMessage.style.display = 'block';
                container.style.display = 'none';
            } else {
                noCardsMessage.style.display = 'none';
                container.style.display = 'flex';
                
                // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏
                response.cards.forEach(card => {
                    const cardElement = createSavedCard(card, response.deck);
                    container.appendChild(cardElement);
                });
            }
        }
    } catch (error) {
        console.error('Error loading deck cards:', error);
        showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫: ${error.message}`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ–∫–Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
function createSavedCard(card, deck) {
    const cardDiv = document.createElement('div');
    cardDiv.className = 'saved-card';
    cardDiv.dataset.cardId = card.id;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥–∏ —è–∑—ã–∫–æ–≤
    const langFromCode = extractLanguageCode(deck.lang_from);
    const langToCode = extractLanguageCode(deck.lang_to);
    const langFromFlag = getLanguageFlag(langFromCode);
    const langToFlag = getLanguageFlag(langToCode);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let imageHtml = '';
    if (card.image_path && card.image_path.trim() !== '') {
        let webImagePath;
        if (card.image_path.startsWith('assets/')) {
            webImagePath = `/static/${card.image_path}`;
        } else if (card.image_path.startsWith('/static/')) {
            webImagePath = card.image_path;
        } else {
            webImagePath = card.image_path.replace('frontend/', '/static/');
        }
        imageHtml = `
            <div class="card-image-container">
                <img src="${webImagePath}" alt="Keyword Image" class="card-image">
            </div>
        `;
    }
    
    cardDiv.innerHTML = `
        <div class="card-content">
            <div class="card-side front">
                <span class="card-flag">${langFromFlag}</span>
                <span class="card-text">${card.front_text}</span>
                <button class="audio-btn" onclick="playAudio('${card.front_text.replace(/'/g, "\\'")}', '${langFromCode}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
            <div class="card-side back">
                <span class="card-flag">${langToFlag}</span>
                <span class="card-text">${card.back_text}</span>
                <button class="audio-btn" onclick="playAudio('${card.back_text.replace(/'/g, "\\'")}', '${langToCode}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å">
                    üîä
                </button>
            </div>
        </div>
        <div class="img-btn-container">
        ${imageHtml}
        <div class="card-actions">
            <button class="card-btn delete-card-btn" onclick="deleteCard(${card.id})">
                ${t('delete')}
            </button>
        </div>
        </div>
    `;
    
    return cardDiv;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
window.practiceCard = function(cardId) {
    alert(`–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ ${cardId} –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ`);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
window.deleteCard = async function(cardId) {
    if (!confirm(t('delete_confirmation'))) {
        return;
    }
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
        const response = await api.deleteCard(cardId);
        
        console.log(`Card ${cardId} deleted successfully`);
        
        // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        const cardElement = document.querySelector(`[data-card-id="${cardId}"]`);
        if (cardElement) {
            cardElement.remove();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–æ–ª–æ–¥–µ, –µ—Å–ª–∏ –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        const cardsCountElement = document.querySelector('.deck-info .cards-count');
        if (cardsCountElement && response.deck_cards_count !== undefined) {
            cardsCountElement.textContent = `${response.deck_cards_count} –∫–∞—Ä—Ç–æ—á–µ–∫`;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        alert(t('card_deleted'));
        
    } catch (error) {
        console.error('Error deleting card:', error);
        alert(t('card_delete_error'));
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
// –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—É–¥–∏–æ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞
// window.playAudioWithDetection = async function(text) {
//     const detectedLang = detectLanguageByText(text);
//     return playAudio(text, detectedLang);
// };

window.playAudio = async function(text, langCode) {
    console.log('playAudio called with:', { text, langCode });
    try {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
        const cleanText = text.replace(/<[^>]*>/g, '');
        console.log('Clean text:', cleanText);
        
        // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        if (false) { // –û—Ç–∫–ª—é—á–∞–µ–º Web Speech API
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            window.speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(cleanText);
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
            const langMap = {
                'en': 'en-US',
                'ru': 'ru-RU',
                'es': 'es-ES', 
                'pt': 'pt-PT',
                'pl': 'pl-PL',
                'de': 'de-DE',
                'fr': 'fr-FR',
            };
            
            utterance.lang = langMap[langCode] || 'en-US';
            utterance.rate = 0.8;
            utterance.pitch = 1;
            utterance.volume = 1;
            
            window.speechSynthesis.speak(utterance);
        } else {
            // –î–ª—è Telegram WebApp –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞—É–¥–∏–æ
            console.log('Using server-side TTS');
            try {
                console.log('Calling api.generateAudio with:', { text: cleanText, lang_code: langCode });
                const response = await api.generateAudio({
                    text: cleanText,
                    lang_code: langCode
                });
                console.log('API response:', response);
                
                if (response && response.audio_url) {
                     const audio = new Audio(response.audio_url);
                     
                     // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                     audio.addEventListener('error', async (e) => {
                         console.log('Audio file not found, waiting for generation...');
                         // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
                         setTimeout(() => {
                             const retryAudio = new Audio(response.audio_url);
                             retryAudio.play().catch(retryError => {
                                 console.error('Retry audio play failed:', retryError);
                                 alert(t('audio_playback_error'));
                             });
                         }, 1000);
                     });
                     
                     audio.play().catch(error => {
                         console.error('Error playing audio file:', error);
                         // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ, —Ç–∞–∫ –∫–∞–∫ —Ñ–∞–π–ª –º–æ–∂–µ—Ç –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                     });
                 } else {
                     throw new Error('No audio URL received');
                 }
            } catch (error) {
                console.error('Error generating audio:', error);
                alert(t('audio_generation_error'));
            }
        }
    } catch (error) {
        console.error('Error playing audio:', error);
        alert(t('audio_playback_error'));
    }
};

document.addEventListener('DOMContentLoaded', async () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
    await initializeApp();
});

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        initializeI18n();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
        const tg = window.Telegram?.WebApp;
        if (tg) {
            tg.ready();
            tg.expand();
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        showLoading('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        const existingToken = localStorage.getItem('auth_token');
        if (existingToken) {
            console.log('Found existing token, verifying...');
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
                await api.getCurrentUser();
                console.log('Existing token is valid');
            } catch (error) {
                console.log('Existing token is invalid, re-authenticating...');
                localStorage.removeItem('auth_token');
                localStorage.removeItem('user_data');
            }
        }

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        if (!localStorage.getItem('auth_token')) {
            console.log('Authenticating user...');
            try {
                await api.authenticateUser();
                console.log('Authentication completed successfully');
            } catch (authError) {
                console.error('Authentication failed:', authError);
                throw new Error(`–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${authError.message}`);
            }
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å–∫—Ä—ã—Ç–∞

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try {
            await refreshDecks();
            console.log('Decks loaded successfully');
        } catch (decksError) {
            console.error('Failed to load decks:', decksError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—ã: ${decksError.message}`);
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        showWindow('main-window');
        
        console.log('App initialized successfully');
        
    } catch (error) {
        console.error('App initialization failed:', error);
        console.error('Error stack:', error.stack);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        showError(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${errorMessage}`);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
        const errorContainer = document.querySelector('.error-message');
        if (errorContainer && !errorContainer.querySelector('.retry-btn')) {
            const retryBtn = document.createElement('button');
            retryBtn.textContent = '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞';
            retryBtn.className = 'retry-btn';
            retryBtn.style.marginTop = '10px';
            retryBtn.onclick = () => {
                location.reload();
            };
            errorContainer.appendChild(retryBtn);
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function displayUserInfo() {
    const userData = getUserData();
    const userInfoElement = document.getElementById('user-info');
    
    if (userData && userData.first_name && userInfoElement) {
        userInfoElement.textContent = `üë§ ${userData.first_name}`;
        userInfoElement.style.display = 'block';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–æ–¥
async function refreshDecks() {
    try {
        showLoading(t('loading_decks'));
        const decks = await api.getDecks();
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ decks –Ω–µ null –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
        const safeDecks = Array.isArray(decks) ? decks : [];
        renderDecks(safeDecks);
    } catch (error) {
        console.error("Failed to refresh decks:", error);
        showError(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–ª–æ–¥—ã');
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
// –§—É–Ω–∫—Ü–∏—è main() —É–¥–∞–ª–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è initializeApp() –≤–º–µ—Å—Ç–æ –Ω–µ—ë

// ============================================
//             –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô
// ============================================

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    // –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "+" –Ω–∞ –≥–ª–∞–≤–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
    const addDeckBtn = document.getElementById('add-deck-btn');
    if (addDeckBtn) {
        addDeckBtn.addEventListener('click', () => {
            console.log('Add deck button clicked');
            showWindow('create-deck-window');
        });
    } else {
        console.error('add-deck-btn not found');
    }
});

// –î—É–±–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
document.getElementById('add-deck-btn')?.addEventListener('click', () => {
    console.log('Add deck button clicked (fallback)');
    showWindow('create-deck-window');
});

// –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ "–ù–∞–∑–∞–¥" –≤ –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è
document.getElementById('back-to-main-btn').addEventListener('click', async () => {
    await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
    showWindow('main-window');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –æ–∫–Ω–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
document.getElementById('back-from-cards-btn').addEventListener('click', async () => {
    await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
    showWindow('main-window');
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–ª–æ–¥—ã
DOMElements.createDeckForm.addEventListener('submit', async (event) => {
    event.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã

    const formData = new FormData(event.target);
    const deckData = Object.fromEntries(formData.entries());
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
    if (!deckData.name || deckData.name.trim().length < 2) {
        alert(t('deck_name_min_length'));
        return;
    }
    
    if (!deckData.lang_from || !deckData.lang_to) {
        alert(t('select_both_languages'));
        return;
    }
    
    if (deckData.lang_from === deckData.lang_to) {
        alert(t('languages_must_differ'));
        return;
    }
    
    const submitBtn = DOMElements.createDeckForm.querySelector('button[type="submit"]');
    submitBtn.disabled = true; // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
    submitBtn.textContent = '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...';

    try {
        await api.createDeck(deckData);
        event.target.reset(); // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        showWindow('main-window'); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
        await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –Ω–æ–≤—É—é
    } catch (error) {
        console.error("Failed to create deck:", error);
        alert(`${t('deck_creation_error')} ${error.message}`); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    } finally {
        submitBtn.disabled = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        submitBtn.textContent = '‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–æ–¥—É';
    }
 });

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
window.showStatsModal = async function() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–∑—É —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
        document.getElementById('stats-modal').classList.remove('hidden');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modalBody = document.querySelector('.stats-modal-body');
        const originalContent = modalBody.innerHTML;
        modalBody.innerHTML = `
            <div style="text-align: center; padding: 40px;">
                <div style="font-size: 24px; margin-bottom: 10px;">‚è≥</div>
                <p>${t('loading_stats') || 'Loading statistics...'}</p>
            </div>
        `;
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const stats = await getStatistics();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∫ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
        stats.againCards += sessionRepeatStats.againCards;
        stats.goodCards += sessionRepeatStats.goodCards;
        stats.easyCards += sessionRepeatStats.easyCards;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        modalBody.innerHTML = originalContent;
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        displayStatistics(stats);
        
        // –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        createDailyChart(stats.dailyTraining);
        
    } catch (error) {
        console.error('Error loading statistics:', error);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        let errorMessage = t('stats_load_error') || 'Error loading statistics';
        let errorDetails = '';
        
        if (error.message) {
            errorDetails = error.message;
        } else if (error.status === 401) {
            errorMessage = 'Authentication required';
            errorDetails = 'Please log in again';
        } else if (error.status === 403) {
            errorMessage = 'Access denied';
            errorDetails = 'You don\'t have permission to view statistics';
        } else if (error.status === 500) {
            errorMessage = 'Server error';
            errorDetails = 'Please try again later';
        } else if (!navigator.onLine) {
            errorMessage = 'No internet connection';
            errorDetails = 'Please check your connection';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        const modalBody = document.querySelector('.stats-modal-body');
        modalBody.innerHTML = `
            <div style="text-align: center; padding: 40px; color: #ff4757;">
                <div style="font-size: 24px; margin-bottom: 10px;">‚ùå</div>
                <p style="font-weight: bold; margin-bottom: 10px;">${errorMessage}</p>
                ${errorDetails ? `<p style="font-size: 14px; color: #666; margin-bottom: 20px;">${errorDetails}</p>` : ''}
                <button onclick="window.showStatsModal()" style="margin-top: 20px; padding: 10px 20px; background: #f4c300; border: none; border-radius: 10px; cursor: pointer;">${t('try_again') || 'Try Again'}</button>
            </div>
        `;
    }
}

window.getStatistics = async function() {
    try {
        console.log('Starting statistics collection...');
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–æ–¥—ã
        console.log('Fetching decks...');
        const decks = await api.getDecks();
        console.log('Decks received:', decks.length, 'decks');
        
        let totalCards = 0;
        let learnedCards = 0;
        let repeatCards = 0;
        let againCards = 0;
        let goodCards = 0;
        let easyCards = 0;
        const deckDistribution = [];
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–¥–µ
        for (const deck of decks) {
            const cardsResponse = await api.getDeckCards(deck.id);
            // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º cards
            const cards = cardsResponse && cardsResponse.cards ? cardsResponse.cards : 
                         (Array.isArray(cardsResponse) ? cardsResponse : []);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∞–º–æ–π –∫–æ–ª–æ–¥—ã –∫–∞–∫ –æ—Å–Ω–æ–≤—É
            const deckTotalCards = deck.cards_count || 0;
            const deckRepeatCards = deck.due_count || 0;
            const deckStats = {
                name: deck.name,
                totalCards: deckTotalCards,
                learnedCards: Math.max(0, deckTotalCards - deckRepeatCards),
                repeatCards: deckRepeatCards
            };
            
            totalCards += deckTotalCards;
            learnedCards += deckStats.learnedCards;
            repeatCards += deckRepeatCards;
            
            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
            const againCount = Math.floor(deckRepeatCards * 0.4); // 40% - —Å–Ω–æ–≤–∞
            const goodCount = Math.floor(deckRepeatCards * 0.4);   // 40% - —Ö–æ—Ä–æ—à–æ
            const easyCount = deckRepeatCards - againCount - goodCount; // –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ª–µ–≥–∫–æ
            
            againCards += againCount;
            goodCards += goodCount;
            easyCards += easyCount;
            
            deckDistribution.push(deckStats);
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        const dailyTraining = await generateDailyTrainingData();
        
        return {
            totalDecks: decks.length,
            totalCards,
            learnedCards,
            repeatCards,
            againCards,
            goodCards,
            easyCards,
            deckDistribution,
            dailyTraining
        };
        
    } catch (error) {
        console.error('Error getting statistics:', error);
        throw error;
    }
}

window.displayStatistics = function(stats) {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const totalDecksEl = document.getElementById('total-decks-stat');
    if (totalDecksEl) totalDecksEl.textContent = stats.totalDecks;
    
    const totalCardsEl = document.getElementById('total-cards-stat');
    if (totalCardsEl) totalCardsEl.textContent = stats.totalCards;
    
    const learnedCardsEl = document.getElementById('learned-cards-stat');
    if (learnedCardsEl) learnedCardsEl.textContent = stats.learnedCards;
    
    const repeatCardsEl = document.getElementById('repeat-cards-stat');
    if (repeatCardsEl) repeatCardsEl.textContent = stats.repeatCards;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π - —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const againCardsEl = document.getElementById('again-cards-stat');
    if (againCardsEl) againCardsEl.textContent = stats.againCards;
    
    const goodCardsEl = document.getElementById('good-cards-stat');
    if (goodCardsEl) goodCardsEl.textContent = stats.goodCards;
    
    const easyCardsEl = document.getElementById('easy-cards-stat');
    if (easyCardsEl) easyCardsEl.textContent = stats.easyCards;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–æ–ª–æ–¥–∞–º - —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const distributionContainer = document.getElementById('deck-distribution-list');
    if (distributionContainer) {
        distributionContainer.innerHTML = '';
        
        stats.deckDistribution.forEach(deck => {
            const deckItem = document.createElement('div');
            deckItem.className = 'deck-item';
            deckItem.innerHTML = `
                <span class="deck-name">${deck.name}</span>
                <span class="deck-cards-count">${deck.totalCards} ${t('total').toLowerCase()}, ${deck.learnedCards} ${t('learned_cards').toLowerCase()}</span>
            `;
            distributionContainer.appendChild(deckItem);
        });
    } else {
        console.warn('deck-distribution-list element not found in DOM');
    }
}

window.generateDailyTrainingData = async function() {
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ API
        const data = await api.getDailyTrainingStats(7);
        return data;
    } catch (error) {
        console.error('Error fetching daily training data:', error);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        const fallbackData = [];
        const today = new Date();
        
        for (let i = 6; i >= 0; i--) {
            const date = new Date(today);
            date.setDate(date.getDate() - i);
            
            fallbackData.push({
                date: date.toISOString().split('T')[0],
                cardsStudied: 0
            });
        }
        
        return fallbackData;
    }
};

window.createDailyChart = function(data) {
    const canvas = document.getElementById('daily-chart');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ canvas —ç–ª–µ–º–µ–Ω—Ç–∞
    if (!canvas) {
        console.warn('daily-chart canvas element not found in DOM');
        return;
    }
    
    const ctx = canvas.getContext('2d');
    if (!ctx) {
        console.warn('Failed to get 2d context from daily-chart canvas');
        return;
    }
    
    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    if (!data || data.length === 0) {
        ctx.fillStyle = '#666';
        ctx.font = '14px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(t('no_data') || 'No data available', canvas.width / 2, canvas.height / 2);
        return;
    }
    
    const padding = 40;
    const chartWidth = canvas.width - 2 * padding;
    const chartHeight = canvas.height - 2 * padding;
    
    const maxValue = Math.max(...data.map(d => d.cardsStudied));
    const barWidth = chartWidth / data.length;
    
    // –†–∏—Å—É–µ–º –æ—Å–∏
    ctx.strokeStyle = '#ddd';
    ctx.lineWidth = 1;
    ctx.beginPath();
    ctx.moveTo(padding, padding);
    ctx.lineTo(padding, canvas.height - padding);
    ctx.lineTo(canvas.width - padding, canvas.height - padding);
    ctx.stroke();
    
    // –†–∏—Å—É–µ–º —Å—Ç–æ–ª–±—Ü—ã
    data.forEach((item, index) => {
        const barHeight = (item.cardsStudied / maxValue) * chartHeight;
        const x = padding + index * barWidth + barWidth * 0.1;
        const y = canvas.height - padding - barHeight;
        const width = barWidth * 0.8;
        
        // –°—Ç–æ–ª–±–µ—Ü
        ctx.fillStyle = 'var(--brand-blue)' || '#1800ad';
        ctx.fillRect(x, y, width, barHeight);
        
        // –ó–Ω–∞—á–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        ctx.fillStyle = '#333';
        ctx.font = '12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText(item.cardsStudied, x + width / 2, y - 5);
        
        // –î–∞—Ç–∞ —Å–Ω–∏–∑—É
        ctx.fillStyle = '#666';
        ctx.font = '10px Arial';
        const dateLabel = new Date(item.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
        ctx.fillText(dateLabel, x + width / 2, canvas.height - padding + 15);
    });
};

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–æ–ª–æ–¥–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
document.addEventListener('click', (event) => {
    const deckCard = event.target.closest('.deck-card');
    if (deckCard && !event.target.closest('.deck-actions')) {
        // –ö–ª–∏–∫ –ø–æ –∫–æ–ª–æ–¥–µ, –Ω–æ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –¥–µ–π—Å—Ç–≤–∏–π
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–æ–ª–æ–¥—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫
        currentDeckId = parseInt(deckCard.dataset.deckId);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —è–∑—ã–∫–∞—Ö –∏–∑ –∫–æ–ª–æ–¥—ã
        const langFromElement = deckCard.querySelector('.lang-from');
        const langToElement = deckCard.querySelector('.lang-to');
        
        if (langFromElement && langToElement) {
            const langFrom = langFromElement.textContent;
            const langTo = langToElement.textContent;
            
            // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —è–∑—ã–∫–∏ —Å —Ñ–ª–∞–≥–∞–º–∏ –≤ –æ–∫–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
            const langFromCode = deck.lang_from.toLowerCase();
            const langToCode = deck.lang_to.toLowerCase();
            const langFromFlag = getLanguageFlag(langFromCode);
            const langToFlag = getLanguageFlag(langToCode);
            
            document.getElementById('lang-from-display').textContent = `${langFromFlag}${langFromCode}`;
            document.getElementById('lang-to-display').textContent = `${langToFlag}${langToCode}`;
        }
        
        showWindow('generate-cards-window');
    }
});

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('delete-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckName = deckCard.querySelector('.deck-name').textContent;
            
            if (confirm(`${t('deck_deletion_confirm')} "${deckName}"?`)) {
                try {
                    // –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–ª–æ–¥—ã –∏–∑ data-–∞—Ç—Ä–∏–±—É—Ç–∞
                    const deckId = deckCard.dataset.deckId;
                    
                    // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–¥—É —á–µ—Ä–µ–∑ API
                    await api.deleteDeck(deckId);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
                    await refreshDecks();
                } catch (error) {
                    console.error('Failed to delete deck:', error);
                    alert(`${t('deck_deletion_error')} ${error.message}`);
                }
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç–æ—á–∫–∏"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('cards-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckId = parseInt(deckCard.dataset.deckId);
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–æ–¥—ã
            await displayDeckCards(deckId);
            
            showWindow('cards-window');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('train-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckId = parseInt(deckCard.dataset.deckId);
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            await startTraining(deckId);
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏"
    document.addEventListener('click', async (event) => {
        if (event.target.classList.contains('add-cards-btn')) {
            event.preventDefault();
            
            const deckCard = event.target.closest('.deck-card');
            const deckId = parseInt(deckCard.dataset.deckId);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–æ–¥—ã
            currentDeckId = deckId;
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–æ–¥–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —è–∑—ã–∫–æ–≤
            const deckName = deckCard.querySelector('.deck-name').textContent;
            const langFromText = deckCard.querySelector('.lang-from').textContent;
            const langToText = deckCard.querySelector('.lang-to').textContent;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã —è–∑—ã–∫–æ–≤
            const langFromCode = extractLanguageCode(langFromText).toUpperCase();
            const langToCode = extractLanguageCode(langToText).toUpperCase();
            
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥–∏
            const langFromFlag = getLanguageFlag(langFromCode.toLowerCase());
            const langToFlag = getLanguageFlag(langToCode.toLowerCase());
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —è–∑—ã–∫–æ–≤ –≤ –æ–∫–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            document.getElementById('lang-from-display').textContent = `${langFromFlag}${langFromCode}`;
            document.getElementById('lang-to-display').textContent = `${langToFlag}${langToCode}`;
            
            showWindow('generate-cards-window');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è —Ñ—Ä–∞–∑—ã
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    document.addEventListener('DOMContentLoaded', () => {
        const clearPhraseBtn = document.getElementById('clear-phrase-btn');
        if (clearPhraseBtn) {
            clearPhraseBtn.addEventListener('click', () => {
                const phraseInput = document.getElementById('phrase-input');
                phraseInput.value = '';
                phraseInput.focus();
                updateWordTags('');
            });
        }
        
        const clearKeywordBtn = document.getElementById('clear-keyword-btn');
        if (clearKeywordBtn) {
            clearKeywordBtn.addEventListener('click', () => {
                const keywordInput = document.getElementById('keyword-input');
                keywordInput.value = '';
                keywordInput.focus();
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–≥–æ–≤ —Å–ª–æ–≤
        const phraseInput = document.getElementById('phrase-input');
        if (phraseInput) {
            phraseInput.addEventListener('input', (event) => {
                updateWordTags(event.target.value);
            });
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑
        const generateForm = document.getElementById('generate-cards-form');
        if (generateForm) {
            generateForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        
        const phrase = document.getElementById('phrase-input').value.trim();
        const keyword = document.getElementById('keyword-input').value.trim();
        
        if (!phrase || !keyword) {
            alert(t('fill_all_fields'));
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –∏–∑ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–æ–¥—ã
        const langFrom = document.getElementById('lang-from-display').textContent;
        const langTo = document.getElementById('lang-to-display').textContent;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥—ã —è–∑—ã–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üáµüáπ PT" -> "pt")
        const langFromCode = extractLanguageCode(langFrom);
        const langToCode = extractLanguageCode(langTo);
        
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –∫–Ω–æ–ø–∫–µ
            showButtonLoading(true);
            showLoading('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—ã...');
            
            const response = await api.enrichPhrase({
                phrase: phrase,
                keyword: keyword,
                lang_code: langFromCode,
                target_lang: langToCode
            });
            
            if (response) {
                displayGeneratedPhrases(response, langFrom, langTo);
                showWindow('generated-phrases-window');
            } else {
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—ã');
            }
        } catch (error) {
            console.error('Error generating phrases:', error);
            showError(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
        } finally {
            // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            showButtonLoading(false);
        }
            });
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–∫–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
    document.addEventListener('DOMContentLoaded', () => {
        const saveSelectedBtn = document.getElementById('save-selected-btn');
        if (saveSelectedBtn) {
            saveSelectedBtn.addEventListener('click', async () => {
        if (selectedPhrases.size === 0) return;
        
        try {
            showLoading(t('saving_cards'));
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
            const phrasesToSave = [];
            const allCards = document.querySelectorAll('.phrase-card');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ currentDeckId —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if (!currentDeckId) {
                showError('–û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫');
                return;
            }
            
            console.log('Saving cards to deck ID:', currentDeckId);
            
            selectedPhrases.forEach(index => {
                const card = allCards[index];
                if (card) {
                    // –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–µ—Ä–µ–≤–æ–¥, –≤—Ç–æ—Ä–∞—è - –æ—Ä–∏–≥–∏–Ω–∞–ª
                    const originalText = card.querySelector('.phrase-line:first-child .phrase-text').textContent;
                    const translationText = card.querySelector('.phrase-line:last-child .phrase-text').textContent;
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                    let keyword = '';
                    let gapFill = null;
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –ò–ò
                    if (index === 0 && currentGeneratedData?.original_phrase) {
                        // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞
                        keyword = findKeywordInPhrase(originalText) || '';
                        gapFill = currentGeneratedData.original_phrase.gap_fill || null;
                    } else if (currentGeneratedData?.additional_examples?.[index - 1]) {
                        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–∏–Ω–¥–µ–∫—Å —Å–¥–≤–∏–Ω—É—Ç –Ω–∞ -1)
                        const example = currentGeneratedData.additional_examples[index - 1];
                        keyword = findKeywordInPhrase(originalText) || '';
                        gapFill = example.gap_fill || null;
                    } else {
                        keyword = findKeywordInPhrase(originalText) || '';
                    }
                    
                    const cardData = {
                        deck_id: currentDeckId,
                        front_text: originalText,
                        back_text: translationText,
                        keyword: keyword || null,
                        gap_fill: gapFill,
                        difficulty: 1,
                        next_review: new Date().toISOString(),
                        image_path: currentGeneratedData?.image_path || null
                    };
                    
                    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —Å gap_fill:', {
                        phrase: originalText,
                        keyword: keyword,
                        gap_fill: gapFill,
                        cardData: cardData
                    });
                    phrasesToSave.push(cardData);
                }
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ä—Ç–æ—á–∫—É
            for (const cardData of phrasesToSave) {
                await api.saveCard(cardData);
            }
            
            alert(t('cards_saved', { count: phrasesToSave.length }));
            await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
            showWindow('main-window');
            
        } catch (error) {
            console.error('Error saving cards:', error);
            showError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${error.message}`);
        }
            });
        }
    });
    
    document.getElementById('regenerate-btn').addEventListener('click', () => {
        showWindow('generate-cards-window');
    });
    
    document.getElementById('back-to-main-btn').addEventListener('click', () => {
        showWindow('main-window');
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ –æ–∫–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
    document.getElementById('back-from-generate-btn').addEventListener('click', async () => {
        await refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–¥
        showWindow('main-window');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã–¥–µ–ª–∏—Ç—å –≤—Å–µ"
const selectAllBtn = document.getElementById('select-all-btn');
if (selectAllBtn) {
    selectAllBtn.addEventListener('click', () => {
    const allCards = document.querySelectorAll('.phrase-card');
    const selectAllBtn = document.getElementById('select-all-btn');
    
    if (selectedPhrases.size === allCards.length) {
        // –ï—Å–ª–∏ –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω—ã, —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        selectedPhrases.clear();
        allCards.forEach((card, index) => {
            card.classList.remove('selected');
            const selectBtn = card.querySelector('.select-btn');
            selectBtn.textContent = '–í—ã–±—Ä–∞—Ç—å';
            selectBtn.classList.remove('selected');
        });
        selectAllBtn.textContent = t('select_all');
    } else {
        // –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ
        selectedPhrases.clear();
        allCards.forEach((card, index) => {
            selectedPhrases.add(index);
            card.classList.add('selected');
            const selectBtn = card.querySelector('.select-btn');
            selectBtn.textContent = '–í—ã–±—Ä–∞–Ω–æ';
            selectBtn.classList.add('selected');
        });
        selectAllBtn.textContent = t('deselect_all');
    }
    
    updatePhrasesCounter();
     });
 }

// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ initializeApp() –≤ DOMContentLoaded

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–æ–º –≤ –∫–Ω–æ–ø–∫–µ
function showButtonLoading(show) {
    const spinner = document.querySelector('#enrich-btn .loading-spinner');
    const btnText = document.querySelector('#enrich-btn .btn-text');
    const button = document.getElementById('enrich-btn');
    
    if (show) {
        spinner.classList.remove('hidden');
        btnText.textContent = t('enriching');
        button.disabled = true;
    } else {
        spinner.classList.add('hidden');
        btnText.textContent = t('enrich_button');
        button.disabled = false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–∫–Ω–µ —Ñ—Ä–∞–∑
function updatePhraseImage(imagePath) {
    const imageElement = document.getElementById('phrase-image');
    if (imagePath && imagePath.trim() !== '') {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        let webImagePath;
        if (imagePath.startsWith('assets/')) {
            webImagePath = `/static/${imagePath}`;
        } else if (imagePath.startsWith('/static/')) {
            webImagePath = imagePath;
        } else {
            webImagePath = imagePath.replace('frontend/', '/static/');
        }
        imageElement.src = webImagePath;
        imageElement.alt = 'Keyword Image';
        console.log('Updated phrase image:', webImagePath);
    } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º mascot –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        imageElement.src = '/static/assets/icons/mascot.png';
        imageElement.alt = 'Mascot';
        console.log('Using default mascot image');
    }
}

// ===== –õ–û–ì–ò–ö–ê –¢–†–ï–ù–ò–†–û–í–ö–ò =====

let trainingData = {
    cards: [],
    currentIndex: 0,
    totalCards: 0,
    deckInfo: null,
    sessionStartTime: null,
    cardsStudiedInSession: 0
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
let sessionRepeatStats = {
    againCards: 0,
    goodCards: 0,
    easyCards: 0
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
window.startTraining = async function(deckId) {
    try {
        showLoading(t('loading_training_cards'));
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ–ª–æ–¥—ã
        const response = await api.getDeckCards(deckId);
        
        if (!response || !response.cards || response.cards.length === 0) {
            showError('–í —ç—Ç–æ–π –∫–æ–ª–æ–¥–µ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
            return;
        }
        
        // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –±–µ—Ä–µ–º –º–∞–∫—Å–∏–º—É–º 10
        const shuffledCards = response.cards.sort(() => Math.random() - 0.5);
        const selectedCards = shuffledCards.slice(0, Math.min(10, shuffledCards.length));
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤ –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        sessionRepeatStats = {
            againCards: 0,
            goodCards: 0,
            easyCards: 0
        };
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        trainingData = {
            cards: response.cards,
            currentIndex: 0,
            totalCards: response.cards.length,
            deckInfo: response.deck,
            sessionStartTime: new Date(),
            cardsStudiedInSession: 0
        };
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        showWindow('training-window');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        loadTrainingCard();
        
    } catch (error) {
        console.error('Error starting training:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
    }
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
function loadTrainingCard() {
    const currentCard = trainingData.cards[trainingData.currentIndex];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    updateTrainingProgress();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageElement = document.getElementById('training-image');
    if (currentCard.image_path && currentCard.image_path.trim() !== '') {
        const webImagePath = currentCard.image_path.replace('frontend/', '/static/');
        imageElement.src = webImagePath;
        imageElement.alt = 'Card Image';
    } else {
        imageElement.src = '/static/assets/icons/mascot.png';
        imageElement.alt = 'Mascot';
    }
    
    // –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    let exerciseType;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!currentCard.keyword || currentCard.keyword.trim() === '') {
        currentCard.keyword = findKeywordInPhrase(currentCard.front_text);
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    if (currentCard.keyword && currentCard.keyword.trim() !== '') {
        const rand = Math.random();
        if (rand < 0.4) {
            exerciseType = 2; // 40% - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        } else if (rand < 0.7) {
            exerciseType = 0; // 30% - –ø–µ—Ä–µ–≤–æ–¥
        } else {
            exerciseType = 1; // 30% - –æ–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        }
        console.log('üéØ –í—ã–±—Ä–∞–Ω —Ç–∏–ø —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', {
            phrase: currentCard.front_text,
            keyword: currentCard.keyword,
            exerciseType: exerciseType,
            type: exerciseType === 2 ? '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤' : exerciseType === 0 ? '–ø–µ—Ä–µ–≤–æ–¥' : '–æ–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥'
        });
    } else {
        // –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
        exerciseType = Math.floor(Math.random() * 2); // 0 –∏–ª–∏ 1
        console.log('üìù –û–±—ã—á–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–Ω–µ—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞):', {
            phrase: currentCard.front_text,
            exerciseType: exerciseType,
            type: exerciseType === 0 ? '–ø–µ—Ä–µ–≤–æ–¥' : '–æ–±—Ä–∞—Ç–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥'
        });
    }
    
    currentCard.exerciseType = exerciseType;
    
    const phraseElement = document.getElementById('training-phrase');
    const answerInput = document.getElementById('answer-input');
    
    if (exerciseType === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ, –æ–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
        phraseElement.textContent = currentCard.front_text;
        answerInput.placeholder = t('enter_translation');
        answerInput.setAttribute('data-reverse', 'false');
        currentCard.expectedAnswer = currentCard.back_text;
    } else if (exerciseType === 1) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥, –æ–∂–∏–¥–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ
        phraseElement.textContent = currentCard.back_text;
        answerInput.placeholder = t('enter_phrase');
        answerInput.setAttribute('data-reverse', 'true');
        currentCard.expectedAnswer = currentCard.front_text;
    } else {
        // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ - –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—Ä–∞–∑—É –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ (front_text)
        let phraseWithGap;
        let expectedAnswer;
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–ø—É—Å–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—Ä–∞–∑–µ (–Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ)
        phraseWithGap = createPhraseWithGap(currentCard.front_text, currentCard.keyword);
        expectedAnswer = currentCard.keyword;
        
        console.log('üéØ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–∞ –∏–∑—É—á–∞–µ–º–æ–º —è–∑—ã–∫–µ:', {
            original: currentCard.front_text,
            phrase_with_gap: phraseWithGap,
            expected_answer: expectedAnswer,
            hint_translation: currentCard.back_text
        });
        
        phraseElement.innerHTML = phraseWithGap;
        answerInput.placeholder = t('enter_missing_word');
        answerInput.setAttribute('data-reverse', 'false');
        currentCard.expectedAnswer = expectedAnswer;
    }
    
    // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    answerInput.value = '';
    answerInput.className = 'answer-input';
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
    document.getElementById('correct-answer').classList.add('hidden');
    document.getElementById('rating-buttons').classList.add('hidden');
    
    // –£–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Å–∫–∞–∑–∫–∏
    const hintBtn = document.getElementById('hint-btn');
    const hintText = document.getElementById('hint-text');
    
    if (exerciseType === 2) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
        hintBtn.classList.remove('hidden');
        hintText.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
    } else {
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        hintBtn.classList.add('hidden');
        hintText.classList.add('hidden');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏
    document.getElementById('check-btn').style.display = 'block';
    document.getElementById('check-btn').disabled = false;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞
function findMissingWordFromGapFill(originalPhrase, gapFillPhrase) {
    if (!originalPhrase || !gapFillPhrase) return null;
    
    console.log('üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞:', { originalPhrase, gapFillPhrase });
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—ã –Ω–∞ —Å–ª–æ–≤–∞
    const originalWords = originalPhrase.split(/\s+/);
    const gapFillWords = gapFillPhrase.split(/\s+/);
    
    // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∏—â–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–ø—É—Å–∫–∞
    if (originalWords.length !== gapFillWords.length) {
        // –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –≥–¥–µ –ø–æ—è–≤–∏–ª—Å—è –ø—Ä–æ–ø—É—Å–∫ "_____"
        for (let i = 0; i < gapFillWords.length; i++) {
            if (gapFillWords[i].includes('_____')) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—Ä–∞–∑—ã
                if (i < originalWords.length) {
                    const missingWord = originalWords[i].replace(/[^\p{L}]/gu, ''); // –£–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
                    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ (—Ä–∞–∑–Ω–∞—è –¥–ª–∏–Ω–∞):', missingWord);
                    return missingWord;
                }
            }
        }
    } else {
        // –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–ª–æ–≤–æ –∑–∞ —Å–ª–æ–≤–æ–º
        for (let i = 0; i < originalWords.length; i++) {
            if (gapFillWords[i].includes('_____')) {
                const missingWord = originalWords[i].replace(/[^\p{L}]/gu, ''); // –£–±–∏—Ä–∞–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é
                console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ (–æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª–∏–Ω–∞):', missingWord);
                return missingWord;
            }
        }
    }
    
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ');
    return null;
}

function findKeywordInPhrase(phrase) {
    if (!phrase) return null;
    
    console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞:', phrase);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–∞ —Å–ª–æ–≤–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
    const words = phrase.toLowerCase().split(/\s+/).map(word => 
        word.replace(/[^\p{L}]/gu, '') // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö Unicode –±—É–∫–≤
    ).filter(word => word.length > 0);
    
    console.log('üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞:', words);
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–ª—É–∂–µ–±–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    const universalStopWords = new Set([
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
        'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',
        'is', 'are', 'was', 'were', 'be', 'been', 'have', 'has', 'had', 'do', 'does', 'did',
        'will', 'would', 'could', 'should', 'may', 'might', 'can', 'must', 'shall',
        'i', 'you', 'he', 'she', 'it', 'we', 'they', 'me', 'him', 'her', 'us', 'them',
        'my', 'your', 'his', 'her', 'its', 'our', 'their', 'this', 'that', 'these', 'those',
        'not', 'no', 'yes', 'all', 'any', 'some', 'each', 'every', 'other', 'another',
        // –†—É—Å—Å–∫–∏–µ
        '–∏', '–≤', '–Ω–µ', '–Ω–∞', '—è', '–±—ã—Ç—å', '—Å', '–æ–Ω', '–∞', '–∫–∞–∫', '—á—Ç–æ', '—ç—Ç–æ', '–æ–Ω–∞', '—Ç–∞–∫',
        '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ',
        '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ',
        '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å',
        // –ù–µ–º–µ—Ü–∫–∏–µ
        'der', 'die', 'das', 'und', 'oder', 'aber', 'in', 'auf', 'zu', 'mit', 'von', 'f√ºr',
        'ist', 'sind', 'war', 'waren', 'haben', 'hat', 'hatte', 'werden', 'wird', 'wurde',
        'ich', 'du', 'er', 'sie', 'es', 'wir', 'ihr', 'mein', 'dein', 'sein', 'unser',
        // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ
        'le', 'la', 'les', 'un', 'une', 'et', 'ou', 'mais', 'dans', 'sur', 'avec', 'de', 'du',
        'est', 'sont', '√©tait', '√©taient', 'avoir', '√™tre', 'je', 'tu', 'il', 'elle', 'nous', 'vous',
        // –ò—Å–ø–∞–Ω—Å–∫–∏–µ
        'el', 'la', 'los', 'las', 'un', 'una', 'y', 'o', 'pero', 'en', 'con', 'de', 'del',
        'es', 'son', 'era', 'eran', 'tener', 'ser', 'yo', 't√∫', '√©l', 'ella', 'nosotros', 'vosotros',
        // –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ
        'il', 'la', 'lo', 'gli', 'le', 'un', 'una', 'e', 'o', 'ma', 'in', 'con', 'di', 'del',
        '√®', 'sono', 'era', 'erano', 'avere', 'essere', 'io', 'tu', 'lui', 'lei', 'noi', 'voi',
        // –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–µ
        'o', 'a', 'os', 'as', 'um', 'uma', 'e', 'ou', 'mas', 'em', 'com', 'de', 'do', 'da',
        '√©', 's√£o', 'era', 'eram', 'ter', 'ser', 'eu', 'tu', 'ele', 'ela', 'n√≥s', 'v√≥s',
        // –ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–µ
        'de', 'het', 'een', 'en', 'of', 'maar', 'in', 'op', 'met', 'van', 'voor',
        'is', 'zijn', 'was', 'waren', 'hebben', 'heeft', 'had', 'ik', 'jij', 'hij', 'zij', 'wij'
    ]);
    
    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª–æ–≤–∞ (–Ω–µ —Å–ª—É–∂–µ–±–Ω—ã–µ, –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤)
    const candidates = words.filter(word => 
        word.length > 2 && 
        !universalStopWords.has(word) &&
        /^\p{L}+$/u.test(word) // –¢–æ–ª—å–∫–æ Unicode –±—É–∫–≤—ã
    );
    
    console.log('üéØ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:', candidates);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–∏–º–æ–µ —Å–ª–æ–≤–æ
    if (candidates.length > 0) {
        const keyword = candidates.sort((a, b) => b.length - a.length)[0];
        console.log('‚úÖ –í—ã–±—Ä–∞–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ:', keyword);
        return keyword;
    }
    
    console.log('‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    return null;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–Ω—è —Å–ª–æ–≤–∞ (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è)
function getUniversalWordStem(word) {
    if (!word || word.length < 3) return word;
    
    const lowerWord = word.toLowerCase();
    
    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–∫–æ–Ω—á–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
    const universalEndings = [
        // –†—É—Å—Å–∫–∏–µ (–¥–ª–∏–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        '–æ—Å—Ç—å', '–µ–Ω–∏–µ', '–∞–Ω–∏–µ', '—Ç—å—Å—è', '–µ—Ç—Å—è', '—é—Ç—Å—è', '–∞–ª—Å—è', '–∞–ª–∞—Å—å', '–∞–ª–æ—Å—å', '–∞–ª–∏—Å—å',
        '—É–µ—Ç', '—É—é—Ç', '–∞–µ—Ç', '–∞—é—Ç', '–∏—Ç—å', '–∞—Ç—å', '–µ—Ç—å', '–æ—Ç—å', '—É—Ç—å', '—ã—Ç—å',
        '—ã–π', '–∞—è', '–æ–µ', '—ã–µ', '–æ–π', '–µ–π', '–æ–º', '–∞–º–∏', '–∞—Ö', '–æ–≤', '–µ–≤',
        '–∞–ª', '–ª–∞', '–ª–æ', '–ª–∏', '–µ–º', '–µ—à—å', '–µ—Ç', '–µ—Ç–µ', '—É—Ç', '—é—Ç',
        // –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ
        'ing', 'tion', 'sion', 'ness', 'ment', 'able', 'ible', 'ful', 'less',
        'ous', 'ive', 'ical', 'ary', 'ory', 'ize', 'ise', 'ed', 'er', 'est', 'ly',
        // –ù–µ–º–µ—Ü–∫–∏–µ
        'ung', 'heit', 'keit', 'lich', 'isch', 'ern', 'eln', 'nen', 'ten', 'den',
        // –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–µ
        'tion', 'sion', 'ment', 'ique', 'able', 'ible', 'eur', 'euse', 'ant', 'ent',
        // –ò—Å–ø–∞–Ω—Å–∫–∏–µ
        'ci√≥n', 'si√≥n', 'mente', 'able', 'ible', 'ador', 'edor', 'ando', 'endo', 'ido',
        // –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–µ
        'zione', 'sione', 'mente', 'abile', 'ibile', 'atore', 'endo', 'ando', 'ato',
        // –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–µ
        '√ß√£o', 's√£o', 'mente', '√°vel', '√≠vel', 'ador', 'endo', 'ando', 'ado',
        // –û–±—â–∏–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        'es', 'en', 'er', 'el', 'le', 'te', 'de', 'se', 're', 's'
    ].sort((a, b) => b.length - a.length);
    
    for (const ending of universalEndings) {
        if (lowerWord.endsWith(ending) && lowerWord.length > ending.length + 2) {
            return lowerWord.slice(0, -ending.length);
        }
    }
    
    return lowerWord;
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ—Ä–∞–∑—ã —Å –ø—Ä–æ–ø—É—Å–∫–æ–º (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è)
function createPhraseWithGap(phrase, keyword) {
    if (!phrase || !keyword) return phrase;
    
    console.log('üîç –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞ –¥–ª—è:', { phrase, keyword });
    
    const words = phrase.split(/\s+/);
    const keywordStem = getUniversalWordStem(keyword);
    
    // –ò—â–µ–º —Å–ª–æ–≤–æ –¥–ª—è –∑–∞–º–µ–Ω—ã –ø–æ —Ä–∞–∑–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    let foundWordIndex = -1;
    let foundWord = '';
    
    // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for (let i = 0; i < words.length; i++) {
        const cleanWord = words[i].replace(/[^\p{L}]/gu, '');
        if (cleanWord.toLowerCase() === keyword.toLowerCase()) {
            foundWordIndex = i;
            foundWord = words[i];
            console.log('‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:', foundWord);
            break;
        }
    }
    
    // 2. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ—Ä–Ω—é
    if (foundWordIndex === -1 && keywordStem.length > 2) {
        for (let i = 0; i < words.length; i++) {
            const cleanWord = words[i].replace(/[^\p{L}]/gu, '');
            const wordStem = getUniversalWordStem(cleanWord);
            
            if (wordStem === keywordStem) {
                foundWordIndex = i;
                foundWord = words[i];
                console.log('‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ—Ä–Ω—é:', { foundWord, wordStem, keywordStem });
                break;
            }
        }
    }
    
    // 3. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è)
    if (foundWordIndex === -1) {
        for (let i = 0; i < words.length; i++) {
            const cleanWord = words[i].replace(/[^\p{L}]/gu, '').toLowerCase();
            const keywordLower = keyword.toLowerCase();
            
            if ((cleanWord.includes(keywordLower) && cleanWord.length > keywordLower.length) ||
                (keywordLower.includes(cleanWord) && keywordLower.length > cleanWord.length)) {
                foundWordIndex = i;
                foundWord = words[i];
                console.log('‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', foundWord);
                break;
            }
        }
    }
    
    // 4. –°—Ö–æ–∂–µ—Å—Ç—å –ø–æ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω—É
    if (foundWordIndex === -1) {
        let bestMatch = -1;
        let bestSimilarity = 0;
        
        for (let i = 0; i < words.length; i++) {
            const cleanWord = words[i].replace(/[^\p{L}]/gu, '').toLowerCase();
            if (cleanWord.length > 2) {
                const similarity = calculateSimilarity(cleanWord, keyword.toLowerCase());
                if (similarity > 0.7 && similarity > bestSimilarity) {
                    bestSimilarity = similarity;
                    bestMatch = i;
                }
            }
        }
        
        if (bestMatch !== -1) {
            foundWordIndex = bestMatch;
            foundWord = words[bestMatch];
            console.log('‚úÖ –°—Ö–æ–∂–µ—Å—Ç—å –ø–æ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω—É:', { foundWord, similarity: bestSimilarity });
        }
    }
    
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è –∑–∞–º–µ–Ω—ã
    if (foundWordIndex !== -1) {
        const modifiedWords = [...words];
        modifiedWords[foundWordIndex] = '<span class="word-gap">_____</span>';
        
        const result = modifiedWords.join(' ');
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–ø—É—Å–∫:', result);
        return result;
    }
    
    // Fallback: –ø—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–º–µ–Ω—É –¥–ª—è:', keyword);
    const keywordRegex = new RegExp(`\\b${keyword.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi');
    return phrase.replace(keywordRegex, '<span class="word-gap">_____</span>');
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–∞—è)
function checkKeywordAnswer(userAnswer, correctAnswer) {
    const userLower = userAnswer.toLowerCase().trim();
    const correctLower = correctAnswer.toLowerCase().trim();
    
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞:', {
        userAnswer: userAnswer,
        correctAnswer: correctAnswer
    });
    
    // 1. –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (userLower === correctLower) {
        console.log('‚úÖ –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ');
        return true;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ—Ä–Ω—é —Å–ª–æ–≤–∞ (–º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ)
    const userStem = getUniversalWordStem(userLower);
    const correctStem = getUniversalWordStem(correctLower);
    
    if (userStem === correctStem && userStem.length > 2) {
        console.log('‚úÖ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–æ—Ä–Ω—é:', { userStem, correctStem });
        return true;
    }
    
    // 3. –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è)
    if (userLower.includes(correctLower) || correctLower.includes(userLower)) {
        console.log('‚úÖ –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ');
        return true;
    }
    
    // 4. –°—Ö–æ–∂–µ—Å—Ç—å –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
    if (Math.abs(userAnswer.length - correctAnswer.length) <= 3) {
        const similarity = calculateSimilarity(userLower, correctLower);
        if (similarity > 0.75) {
            console.log('‚úÖ –°—Ö–æ–∂–µ—Å—Ç—å –ø–æ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω—É:', similarity);
            return true;
        }
    }
    
    // 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Å—Ö–æ–∂–µ—Å—Ç—å –∫–æ—Ä–Ω–µ–π
    if (userStem.length > 2 && correctStem.length > 2) {
        const stemSimilarity = calculateSimilarity(userStem, correctStem);
        if (stemSimilarity > 0.8) {
            console.log('‚úÖ –°—Ö–æ–∂–µ—Å—Ç—å –∫–æ—Ä–Ω–µ–π:', stemSimilarity);
            return true;
        }
    }
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (—Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è)
    const userClean = userLower.replace(/[^\p{L}]/gu, '');
    const correctClean = correctLower.replace(/[^\p{L}]/gu, '');
    
    if (userClean.length > 2 && correctClean.length > 2) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –¥—Ä—É–≥–æ–≥–æ (—Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã)
        const minLength = Math.min(userClean.length, correctClean.length);
        if (minLength >= 4) {
            const longerWord = userClean.length > correctClean.length ? userClean : correctClean;
            const shorterWord = userClean.length > correctClean.length ? correctClean : userClean;
            
            if (longerWord.includes(shorterWord) && shorterWord.length / longerWord.length > 0.6) {
                console.log('‚úÖ –û–¥–∏–Ω –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–π:', { longerWord, shorterWord });
                return true;
            }
        }
    }
    
    console.log('‚ùå –û—Ç–≤–µ—Ç –Ω–µ –ø—Ä–∏–Ω—è—Ç');
    return false;
}

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫ (–∞–ª–≥–æ—Ä–∏—Ç–º –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
function calculateSimilarity(str1, str2) {
    const longer = str1.length > str2.length ? str1 : str2;
    const shorter = str1.length > str2.length ? str2 : str1;
    
    if (longer.length === 0) {
        return 1.0;
    }
    
    const editDistance = levenshteinDistance(longer, shorter);
    return (longer.length - editDistance) / longer.length;
}

// –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
function levenshteinDistance(str1, str2) {
    const matrix = [];
    
    for (let i = 0; i <= str2.length; i++) {
        matrix[i] = [i];
    }
    
    for (let j = 0; j <= str1.length; j++) {
        matrix[0][j] = j;
    }
    
    for (let i = 1; i <= str2.length; i++) {
        for (let j = 1; j <= str1.length; j++) {
            if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
                matrix[i][j] = matrix[i - 1][j - 1];
            } else {
                matrix[i][j] = Math.min(
                    matrix[i - 1][j - 1] + 1,
                    matrix[i][j - 1] + 1,
                    matrix[i - 1][j] + 1
                );
            }
        }
    }
    
    return matrix[str2.length][str1.length];
}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function updateTrainingProgress() {
    const currentCardNum = trainingData.currentIndex + 1;
    const totalCards = trainingData.totalCards;
    const progressPercent = (currentCardNum / totalCards) * 100;
    
    document.getElementById('current-card').textContent = currentCardNum;
    document.getElementById('total-cards').textContent = totalCards;
    document.getElementById('progress-fill').style.width = `${progressPercent}%`;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞
function checkAnswer() {
    const userAnswer = document.getElementById('answer-input').value.trim();
    const currentCard = trainingData.cards[trainingData.currentIndex];
    const correctAnswer = currentCard.expectedAnswer;
    const answerInput = document.getElementById('answer-input');
    
    if (!userAnswer) {
        alert(t('enter_answer'));
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    let isCorrect = false;
    
    if (currentCard.exerciseType === 2) {
        // –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤ - –±–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        isCorrect = checkKeywordAnswer(userAnswer, correctAnswer);
    } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ - –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        isCorrect = userAnswer.toLowerCase() === correctAnswer.toLowerCase();
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö –æ—Ü–µ–Ω–∫–∏
    currentCard.lastAnswerCorrect = isCorrect;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –ø–æ–ª—è –≤–≤–æ–¥–∞
    if (isCorrect) {
        answerInput.classList.add('correct');
        answerInput.classList.remove('incorrect');
    } else {
        answerInput.classList.add('incorrect');
        answerInput.classList.remove('correct');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        const correctAnswerDiv = document.getElementById('correct-answer');
        correctAnswerDiv.textContent = `${t('correct_answer')} ${correctAnswer}`;
        correctAnswerDiv.classList.remove('hidden');
    }
    
    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
    document.getElementById('check-btn').style.display = 'none';
    document.getElementById('rating-buttons').classList.remove('hidden');
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
function nextCard() {
    trainingData.currentIndex++;
    
    if (trainingData.currentIndex >= trainingData.totalCards) {
        // –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        finishTraining();
    } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        loadTrainingCard();
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
async function finishTraining() {
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if (trainingData.cardsStudiedInSession > 0 && trainingData.sessionStartTime) {
        try {
            const sessionDuration = Math.floor((new Date() - trainingData.sessionStartTime) / 1000);
            await api.recordTrainingSession(trainingData.cardsStudiedInSession, sessionDuration);
            console.log(`Training session recorded: ${trainingData.cardsStudiedInSession} cards in ${sessionDuration} seconds`);
        } catch (error) {
            console.error('Error recording training session:', error);
        }
    }
    
    alert(t('training_completed', { count: trainingData.totalCards }));
    showWindow('main-window');
    refreshDecks(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–æ–¥
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
document.getElementById('check-btn').addEventListener('click', checkAnswer);

document.getElementById('again-btn').addEventListener('click', async () => {
    await handleCardRating('again');
});

document.getElementById('good-btn').addEventListener('click', async () => {
    await handleCardRating('good');
});

document.getElementById('easy-btn').addEventListener('click', async () => {
    await handleCardRating('easy');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
function updateRepeatStatsDisplay() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ DOM —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
    const againStat = document.getElementById('again-cards-stat');
    const goodStat = document.getElementById('good-cards-stat');
    const easyStat = document.getElementById('easy-cards-stat');
    
    if (againStat) againStat.textContent = sessionRepeatStats.againCards;
    if (goodStat) goodStat.textContent = sessionRepeatStats.goodCards;
    if (easyStat) easyStat.textContent = sessionRepeatStats.easyCards;
    
    console.log('Updated repeat stats:', sessionRepeatStats);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
async function handleCardRating(rating) {
    const currentCard = trainingData.cards[trainingData.currentIndex];
    
    try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await api.updateCardStatus({
            card_id: currentCard.id,
            rating: rating
        });
        
        console.log(`Card ${currentCard.id} marked as "${rating}", deck due count: ${response.deck_due_count}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–¥—ã
        if (trainingData.deckInfo && response.deck_due_count !== undefined) {
            trainingData.deckInfo.due_count = response.deck_due_count;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤—Ç–æ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞
        console.log(`Before rating ${rating}:`, JSON.stringify(sessionRepeatStats));
        switch (rating) {
            case 'again':
                sessionRepeatStats.againCards++;
                console.log('Incremented againCards to', sessionRepeatStats.againCards);
                break;
            case 'good':
                sessionRepeatStats.goodCards++;
                console.log('Incremented goodCards to', sessionRepeatStats.goodCards);
                break;
            case 'easy':
                sessionRepeatStats.easyCards++;
                console.log('Incremented easyCards to', sessionRepeatStats.easyCards);
                break;
        }
        
        console.log(`After rating ${rating}:`, JSON.stringify(sessionRepeatStats));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        updateRepeatStatsDisplay();
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ —Å–µ—Å—Å–∏–∏
        trainingData.cardsStudiedInSession++;
        
    } catch (error) {
        console.error('Error updating card status:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–∞—Ä—Ç–æ—á–∫–µ
    nextCard();
}

document.getElementById('back-from-training-btn').addEventListener('click', () => {
    if (confirm(t('training_interruption'))) {
        showWindow('main-window');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
document.getElementById('answer-input').addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        const checkBtn = document.getElementById('check-btn');
        if (checkBtn.style.display !== 'none') {
            checkAnswer();
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
document.getElementById('play-audio-btn').addEventListener('click', () => {
    const currentCard = trainingData.cards[trainingData.currentIndex];
    if (currentCard) {
        const text = currentCard.isForward ? currentCard.front_text : currentCard.back_text;
        const langCode = currentCard.isForward ? 
            extractLanguageCode(trainingData.deckInfo.lang_from) :
            extractLanguageCode(trainingData.deckInfo.lang_to);
        playAudio(text, langCode);

    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
document.getElementById('hint-btn').addEventListener('click', () => {
    const currentCard = trainingData.cards[trainingData.currentIndex];
    const hintText = document.getElementById('hint-text');
    
    if (currentCard && currentCard.exerciseType === 2) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ñ—Ä–∞–∑—ã –∫–∞–∫ –ø–æ–¥—Å–∫–∞–∑–∫—É
        hintText.textContent = currentCard.back_text;
        hintText.classList.remove('hidden');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        document.getElementById('hint-btn').classList.add('hidden');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
document.getElementById('settings-btn').addEventListener('click', () => {
    const modal = document.getElementById('settings-modal');
    modal.classList.remove('hidden');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –≤ radio buttons
    const currentLang = getCurrentLanguage();
    const languageRadio = document.querySelector(`input[name="language"][value="${currentLang}"]`);
    if (languageRadio) {
        languageRadio.checked = true;
    }
});

document.getElementById('close-settings-modal').addEventListener('click', () => {
    const modal = document.getElementById('settings-modal');
    modal.classList.add('hidden');
});

document.getElementById('cancel-settings-btn').addEventListener('click', () => {
    const modal = document.getElementById('settings-modal');
    modal.classList.add('hidden');
});

document.getElementById('save-settings-btn').addEventListener('click', () => {
    const selectedLanguage = document.querySelector('input[name="language"]:checked')?.value;
    
    if (selectedLanguage && selectedLanguage !== getCurrentLanguage()) {
        setLanguage(selectedLanguage);
    }
    
    const modal = document.getElementById('settings-modal');
    modal.classList.add('hidden');
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
document.getElementById('settings-modal').addEventListener('click', (e) => {
    if (e.target.id === 'settings-modal') {
        const modal = document.getElementById('settings-modal');
        modal.classList.add('hidden');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ header
document.addEventListener('DOMContentLoaded', () => {
    const statsBtn = document.getElementById('stats-btn');
    if (statsBtn) {
        statsBtn.addEventListener('click', () => {
            console.log('Stats button clicked');
            showStatsModal();
        });
    } else {
        console.error('stats-btn not found');
    }
});

// –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
document.getElementById('stats-btn')?.addEventListener('click', () => {
    console.log('Stats button clicked (fallback)');
    showStatsModal();
});

document.getElementById('close-stats-modal').addEventListener('click', () => {
    document.getElementById('stats-modal').classList.add('hidden');
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    if (document.getElementById('decks-container').innerHTML.trim() === '') {
        refreshDecks();
    }
});

document.getElementById('close-stats-btn').addEventListener('click', () => {
    document.getElementById('stats-modal').classList.add('hidden');
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
    if (document.getElementById('decks-container').innerHTML.trim() === '') {
        refreshDecks();
    }
});

document.getElementById('stats-modal').addEventListener('click', (e) => {
    if (e.target === document.getElementById('stats-modal')) {
        document.getElementById('stats-modal').classList.add('hidden');
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–æ–¥—ã –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è
        if (document.getElementById('decks-container').innerHTML.trim() === '') {
            refreshDecks();
        }
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–≥–æ–≤ —Å–ª–æ–≤
function updateWordTags(phrase) {
    const container = document.getElementById('word-tags-container');
    container.innerHTML = '';
    
    if (!phrase.trim()) {
        container.classList.add('hidden');
        return;
    }
    
    container.classList.remove('hidden');
    
    // –†–∞–∑–±–∏–≤–∞–µ–º —Ñ—Ä–∞–∑—É –Ω–∞ —Å–ª–æ–≤–∞, —É–¥–∞–ª—è—è –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
    const words = phrase.trim().split(/\s+/).filter(word => {
        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–ª–æ–≤–∞ —Å–æ—Å—Ç–æ—è—â–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
        const cleanWord = word.replace(/[^\w\u00C0-\u017F\u0400-\u04FF]/g, '');
        return cleanWord.length > 0;
    });
    
    words.forEach(word => {
        // –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–æ –æ—Ç –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const cleanWord = word.replace(/[^\w\u00C0-\u017F\u0400-\u04FF]/g, '');
        if (cleanWord.length > 0) {
            const tag = document.createElement('span');
            tag.className = 'word-tag';
            tag.textContent = cleanWord;
            tag.addEventListener('click', () => {
                const keywordInput = document.getElementById('keyword-input');
                keywordInput.value = cleanWord;
                keywordInput.focus();
            });
            container.appendChild(tag);
        }
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Telegram Mini App
function initTelegram() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –≤ Telegram
  const isTelegramWebApp = window.Telegram && window.Telegram.WebApp;
  const isTelegramClient = navigator.userAgent.includes('Telegram');
  
  if (isTelegramWebApp || isTelegramClient) {
    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
    document.body.setAttribute('data-telegram', 'true');
    document.body.classList.add('telegram-webapp');
    
    console.log('Telegram WebApp detected, applying special styles');
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫—ç—à–∞ Telegram
    const cssLink = document.querySelector('link[rel="stylesheet"]');
    if (cssLink) {
      const newLink = cssLink.cloneNode();
      newLink.href = cssLink.href.split('?')[0] + '?v=' + Date.now();
      cssLink.parentNode.replaceChild(newLink, cssLink);
      console.log('CSS reloaded to bypass Telegram cache');
    }
    
    if (isTelegramWebApp) {
      Telegram.WebApp.ready();
      Telegram.WebApp.expand();  // –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –∫–∞–∫ –≤ –≤–µ–±–µ

      // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞, —á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—É Telegram –∏ –º–∞—Ç—á–∏—Ç—å—Å—è —Å –≤–µ–±
      const themeParams = {
        bg_color: '#ffffff',  // –ë–µ–ª—ã–π —Ñ–æ–Ω
        text_color: '#1800ad', // –ù–∞—à —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å–∏–Ω–∏–π
        hint_color: '#4258bb',
        link_color: '#1800ad',
        button_color: '#f4c300', // –ù–∞—à —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π –∂–µ–ª—Ç—ã–π
        button_text_color: '#1800ad'
      };
      Telegram.WebApp.setHeaderColor(themeParams.bg_color);
      Telegram.WebApp.setBackgroundColor(themeParams.bg_color);

      // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Telegram
      document.documentElement.style.setProperty('--tg-theme-bg-color', '#ffffff');
      document.documentElement.style.setProperty('--tg-theme-text-color', '#1800ad');
      document.documentElement.style.setProperty('--tg-theme-button-color', '#f4c300');
      document.documentElement.style.setProperty('--tg-theme-button-text-color', '#1800ad');
    }
  }
}

// –í—ã–∑–æ–≤–∏—Ç–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
initTelegram();