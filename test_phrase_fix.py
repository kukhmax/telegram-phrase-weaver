#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑
"""

import requests
import json

def test_phrase_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑ –¥–ª—è –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–≥–æ-—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ"""
    
    url = "http://localhost:8001/api/cards/enrich"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º "aprender"
    payload = {
        "original_phrase": "Eu quero aprender portugu√™s",
        "keyword": "aprender",
        "deck_id": 2  # –ö–æ–ª–æ–¥–∞ —Å –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–º -> —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–º
    }
    
    params = {"user_id": 1}
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑ –¥–ª—è 'aprender' (pt -> fr)...")
    print(f"URL: {url}")
    print(f"Payload: {json.dumps(payload, indent=2)}")
    print(f"Params: {params}")
    print("\n" + "="*50 + "\n")
    
    try:
        response = requests.post(url, json=payload, params=params)
        
        print(f"Status Code: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç!")
            print(f"Image Query: {data.get('image_query', 'N/A')}")
            print("\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã:")
            
            for i, example in enumerate(data.get('examples', []), 1):
                original = example.get('original', '')
                translation = example.get('translation', '')
                print(f"{i}. {original}")
                print(f"   -> {translation}")
                print()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                if 'aprender' in original.lower():
                    print(f"   ‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ")
                else:
                    print(f"   ‚ùå –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ù–ï –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ")
                    
                if 'apprendre' in translation.lower():
                    print(f"   ‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"   ‚ùå –ü–µ—Ä–µ–≤–æ–¥ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –ù–ï –Ω–∞–π–¥–µ–Ω")
                print()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    test_phrase_generation()