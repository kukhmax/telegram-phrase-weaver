#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Å–µ—Ä–≤–∏—Å–∞
"""

import asyncio
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('backend')

from backend.app.services.ai_service import ai_service

async def test_ai_service():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç AI —Å–µ—Ä–≤–∏—Å —Å –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–∏–º–µ—Ä–æ–º
    """
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI —Å–µ—Ä–≤–∏—Å–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞
    api_key = os.environ.get('GEMINI_API_KEY')
    if not api_key or api_key == '–≤–∞—à_google_gemini_–∫–ª—é—á':
        print("‚ùå –û–®–ò–ë–ö–ê: –ö–ª—é—á GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É!")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á Google Gemini API –≤ —Ñ–∞–π–ª–µ backend/.env")
        print("–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á –º–æ–∂–Ω–æ –∑–¥–µ—Å—å: https://makersuite.google.com/app/apikey")
        return False
    
    print(f"‚úÖ –ö–ª—é—á API –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ñ—Ä–∞–∑
        result = await ai_service.generate_phrases(
            original_phrase="–Ø –∏–¥—É –¥–æ–º–æ–π",
            keyword="–∏–¥—É", 
            source_language="ru",
            target_language="en"
        )
        
        print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(f"üñºÔ∏è  –ó–∞–ø—Ä–æ—Å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {result.get('image_query', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
        print(f"üìö –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(result.get('examples', []))}")
        
        if result.get('examples'):
            print("\nüî§ –ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑:")
            for i, example in enumerate(result['examples'][:3], 1):
                print(f"  {i}. {example.get('original', 'N/A')}")
                print(f"     ‚Üí {example.get('translation', 'N/A')}")
        
        print("\n‚úÖ AI —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ AI —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
    from dotenv import load_dotenv
    load_dotenv('backend/.env')
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    success = asyncio.run(test_ai_service())
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ! AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\nüí• –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        sys.exit(1)